{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/Syntaxes.js","../../src/components/Navbar.svelte","../../src/components/Sidebar.svelte","../../src/components/Card.svelte","../../src/components/TopArrow.svelte","../../src/components/Footer.svelte","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n    return style.sheet;\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentNode !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            else\n                this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { ownerNode } = info.stylesheet;\n            // there is no ownerNode if it runs on jsdom.\n            if (ownerNode)\n                detach(ownerNode);\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n    else if (callback) {\n        callback();\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\n/** regex of all html void element names */\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst ATTR_REGEX = /[&\"]/g;\nconst CONTENT_REGEX = /[&<]/g;\n/**\n * Note: this method is performance sensitive and has been optimized\n * https://github.com/sveltejs/svelte/pull/5701\n */\nfunction escape(value, is_attr = false) {\n    const str = String(value);\n    const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;\n    pattern.lastIndex = 0;\n    let escaped = '';\n    let last = 0;\n    while (pattern.test(str)) {\n        const i = pattern.lastIndex - 1;\n        const ch = str[i];\n        escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : (ch === '\"' ? '&quot;' : '&lt;'));\n        last = i + 1;\n    }\n    return escaped + str.substring(last);\n}\nfunction escape_attribute_value(value) {\n    // keep booleans, null, and undefined for the sake of `spread`\n    const should_escape = typeof value === 'string' || (value && typeof value === 'object');\n    return should_escape ? escape(value, true) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape(value, true)}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.50.1' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        throw new Error(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n","export default {\n  Events: [\n    {\n      description: \"Fired when a song a bot is playing ends.\",\n      name: \"Track end\",\n      patterns: [\"track end [seen by %-string%]\"],\n      eventvalues: [\"event-bot\", \"event-guild\", \"event-audiotrack\"],\n      examples: ['on track end seen by \"Jewel\"'],\n    },\n    {\n      description:\n        \"Fired when the position of a track a bot is playing is changed. This is when it is manually changed, via set position.\",\n      name: \"Track Seek\",\n      patterns: [\"track seek [seen by %-string%]\"],\n      eventvalues: [\"event-bot\", \"event-guild\", \"event-audiotrack\"],\n      examples: ['on track seek seen by \"Jewel\"'],\n    },\n    {\n      description:\n        \"Fired when a song starts. May be when a new track in the queue starts or when the first track is played.\",\n      name: \"Track start\",\n      patterns: [\"track start [seen by %-string%]\"],\n      eventvalues: [\"event-bot\", \"event-guild\", \"event-audiotrack\"],\n      examples: ['on track start seen by \"Jewel\"'],\n    },\n    {\n      description: \"Fired when a reaction is added to a message\",\n      name: \"Reaction Add\",\n      patterns: [\"reaction add[ed] [seen by %-string%]\"],\n      eventvalues: [\n        \"event-bot\",\n        \"event-user\",\n        \"event-member\",\n        \"event-guild\",\n        \"event-message\",\n        \"event-messagechannel\",\n        \"event-guildchannel\",\n        \"event-emote\",\n      ],\n      examples: [\"on reaction add:\"],\n    },\n    {\n      description: \"Fired when a Vixio bot first logs in\",\n      name: \"Bot Login Event\",\n      patterns: [\"[vixio] bot (login|connect) [seen by %-string%]\"],\n      eventvalues: [\"event-bot\"],\n      examples: [\n        \"on bot connect:\",\n        '\\tbroadcast \"%event-bot% is ready to go!\"',\n      ],\n    },\n    {\n      description: \"Used to detect when a specific vixio command is fired\",\n      name: \"Vixio Command\",\n      patterns: [\"vixio command [%-string%]\"],\n      eventvalues: [\n        \"event-discordcommand\",\n        \"event-user\",\n        \"event-member\",\n        \"event-guildchannel\",\n        \"event-messagechannel\",\n        \"event-message\",\n        \"event-guild\",\n        \"event-bot\",\n      ],\n      examples: ['on vixio command \"eval\":'],\n    },\n    {\n      description:\n        \"Fired when a message is sent in a text channel that the bot can read.\",\n      name: \"Guild Message Received\",\n      patterns: [\n        \"(guild|server) message (receive[d] [seen]|sent) [by %-string%]\",\n      ],\n      eventvalues: [\n        \"event-guildchannel\",\n        \"event-messagechannel\",\n        \"event-user\",\n        \"event-member\",\n        \"event-message\",\n        \"event-guild\",\n        \"event-bot\",\n        \"event-string\",\n      ],\n      examples: ['on guild message received seen by \"a bot\":'],\n    },\n    {\n      description: \"Fired when a user joins a voice channel\",\n      name: \"Voice Join\",\n      patterns: [\n        \"user join voice [seen by %-string%]\",\n        \"voice [channel] join [seen by %-string%]\",\n      ],\n      eventvalues: [\n        \"event-bot\",\n        \"event-user\",\n        \"event-member\",\n        \"event-voicechannel\",\n        \"event-guildchannel\",\n        \"event-guild\",\n      ],\n      examples: [\"on voice channel join:\"],\n    },\n    {\n      description: \"Fired when a user leaves a voice channel\",\n      name: \"Voice Leave\",\n      patterns: [\n        \"user leave voice [seen by %-string%]\",\n        \"voice [channel] leave [seen by %-string%]\",\n      ],\n      eventvalues: [\n        \"event-bot\",\n        \"event-user\",\n        \"event-member\",\n        \"event-voicechannel\",\n        \"event-guildchannel\",\n        \"event-guild\",\n      ],\n      examples: [\"on voice channel leave:\"],\n    },\n    {\n      description: \"Fired when a private message is received or sent.\",\n      name: \"Private Message\",\n      patterns: [\n        \"(private message|direct message) <receive(d)?( seen)?|sent> [by %-string%]\",\n      ],\n      eventvalues: [\n        \"event-bot\",\n        \"event-message\",\n        \"event-user\",\n        \"event-messagechannel\",\n      ],\n      examples: [\"on direct message received:\"],\n    },\n    {\n      description: \"Fired when a reaction is removed from a message\",\n      name: \"Reaction Remove\",\n      patterns: [\"reaction remove[d] [seen by %-string%]\"],\n      eventvalues: [\n        \"event-bot\",\n        \"event-user\",\n        \"event-member\",\n        \"event-guild\",\n        \"event-message\",\n        \"event-messagechannel\",\n        \"event-guildchannel\",\n        \"event-emote\",\n      ],\n      examples: [\"on reaction remove:\"],\n    },\n    {\n      description: \"Fired when a bot joins a new guild.\",\n      name: \"Bot Join Guild\",\n      patterns: [\"bot (join|enter) [new] guild [seen by %-string%]\"],\n      eventvalues: [\"event-bot\", \"event-guild\"],\n      examples: [\"on bot join guild\"],\n    },\n    {\n      description:\n        \"Fired when a bot leaves a guild. This could be caused by getting kicked or just naturally leaving.\",\n      name: \"Bot Leave Guild\",\n      patterns: [\"bot (leave|exit) guild [seen by %-string%]\"],\n      eventvalues: [\"event-bot\", \"event-guild\"],\n      examples: [\"on bot leave guild:\"],\n    },\n    {\n      description: \"Fired when a user is banned from a guild.\",\n      name: \"User Banned\",\n      patterns: [\"user ban[ned] [seen by %-string%]\"],\n      eventvalues: [\"event-bot\", \"event-user\", \"event-guild\"],\n      examples: [\"on user banned:\"],\n    },\n    {\n      description: \"Fired when a user is unbanned from a guild.\",\n      name: \"User Unbanned\",\n      patterns: [\"user unban[ned] [seen by %-string%]\"],\n      eventvalues: [\"event-bot\", \"event-user\", \"event-guild\"],\n      examples: [\"on user unbanned:\"],\n    },\n    {\n      description: \"Fired when a button is clicked.\",\n      name: \"Button Interaction Received\",\n      patterns: [\"button interaction receive[d] [seen by %-string%]\"],\n      eventvalues: [\n        \"event-user\",\n        \"event-messagechannel\",\n        \"event-member\",\n        \"event-bot\",\n        \"event-string\",\n        \"event-emote\",\n        \"event-guild\",\n        \"event-guildchannel\",\n      ],\n      examples: [\"on button interaction received:\"],\n    },\n    {\n      description: \"Fired when a selection is made.\",\n      name: \"Select Menu Interaction Received\",\n      patterns: [\"select [menu] interaction receive[d] [seen by %-string%]\"],\n      eventvalues: [\n        \"event-user\",\n        \"event-messagechannel\",\n        \"event-member\",\n        \"event-bot\",\n        \"event-string\",\n        \"event-guild\",\n        \"event-guildchannel\",\n      ],\n      examples: [\"on select interaction received:\"],\n    },\n    {\n      description: \"Fired when a slash command is executed.\",\n      name: \"Slash Command Received\",\n      patterns: [\"slash command [interaction] receive[d] [seen by %-string%]\"],\n      eventvalues: [\n        \"event-user\",\n        \"event-messagechannel\",\n        \"event-member\",\n        \"event-bot\",\n        \"event-string\",\n        \"event-guild\",\n        \"event-guildchannel\",\n      ],\n      examples: [\"on slash command received:\"],\n    },\n    {\n      description:\n        \"Fired when a Member receives a new role or roles. You can use the `the roles` expression to get all the roles.\",\n      name: \"Role Added\",\n      patterns: [\"member role add[ed] [seen by %-string%]\"],\n      eventvalues: [\n        \"event-bot\",\n        \"event-guild\",\n        \"event-role\",\n        \"event-user\",\n        \"event-member\",\n      ],\n      examples: [\"on member role add:\"],\n    },\n    {\n      description: \"Fired when a member switches voice channels.\",\n      name: \"Member Switch Voice Channel\",\n      patterns: [\"member (switch|move) [voice] channel [seen by %-string%]\"],\n      eventvalues: [\n        \"event-bot\",\n        \"event-member\",\n        \"event-guildchannel\",\n        \"event-guild\",\n        \"event-user\",\n      ],\n      examples: [\n        \"on member switch voice channel:\",\n        '\\tbroadcast \"%event-user% left %old channel% and joined %new channel%\"',\n      ],\n    },\n    {\n      description: \"Fired when a user joins a guild\",\n      name: \"Guild Join\",\n      patterns: [\"(user|member) join (guild|server) [seen by %-string%]\"],\n      eventvalues: [\"event-bot\", \"event-user\", \"event-member\", \"event-guild\"],\n      examples: [\"on member join guild:\"],\n    },\n    {\n      description:\n        \"Fired when a user leaves a guild. Could be caused by kicking them or them leaving on their own free will. This event only fires if you have the guild members intent enabled.\",\n      name: \"Guild Leave\",\n      patterns: [\"(guild|member) leave (guild|server) [seen by %-string%]\"],\n      eventvalues: [\"event-bot\", \"event-user\", \"event-member\", \"event-guild\"],\n      examples: [\"on member leave guild:\"],\n    },\n    {\n      description: \"Fired when a member changes their nickname.\",\n      name: \"Nickname Change\",\n      patterns: [\"[member] nick[name] (change|update) [seen by %-string%]\"],\n      eventvalues: [\"event-bot\", \"event-user\", \"event-member\", \"event-guild\"],\n      examples: [\"on nickname update:\"],\n    },\n    {\n      description:\n        \"Fired when a Member has a role or roles removed from them. You can use the `the roles` expression to get all the roles.\",\n      name: \"Role Removed\",\n      patterns: [\"member role remove[d] [seen by %-string%]\"],\n      eventvalues: [\n        \"event-bot\",\n        \"event-guild\",\n        \"event-role\",\n        \"event-user\",\n        \"event-member\",\n      ],\n      examples: [\"on member role remove:\"],\n    },\n    {\n      description: \"Fired when a message is deleted\",\n      name: \"Message Deleted\",\n      patterns: [\"message delete[d] [seen by %-string%]\"],\n      eventvalues: [\n        \"event-bot\",\n        \"event-message\",\n        \"event-messagechannel\",\n        \"event-guildchannel\",\n        \"event-guild\",\n      ],\n      examples: [\"on message deleted\"],\n    },\n    {\n      description:\n        \"Fired when a message is edited in a text channel that the bot can read.\",\n      name: \"Guild Message Edited\",\n      patterns: [\"(guild|server) message edit[ed] [seen by %-string%]\"],\n      eventvalues: [\n        \"event-guildchannel\",\n        \"event-messagechannel\",\n        \"event-user\",\n        \"event-member\",\n        \"event-message\",\n        \"event-guild\",\n        \"event-bot\",\n        \"event-string\",\n      ],\n      examples: ['on guild message edited seen by \"a bot\":'],\n    },\n    {\n      description:\n        \"Fired when a message is received anywhere, either a private message or a text channel\",\n      name: \"Message Received\",\n      patterns: [\"message receive[d] [seen by %-string%]\"],\n      eventvalues: [\n        \"event-user\",\n        \"event-messagechannel\",\n        \"event-member\",\n        \"event-bot\",\n        \"event-string\",\n        \"event-message\",\n        \"event-guild\",\n        \"event-guildchannel\",\n      ],\n      examples: [\"on message received:\"],\n    },\n  ],\n  Conditions: [\n    {\n      description: \"Tell if a bot is paused or not.\",\n      name: \"Bot paused\",\n      patterns: [\n        \"%bot/string% is paused [in %guild%]\",\n        \"%bot/string% (is|are)(n't| not) paused [in %guild%]\",\n      ],\n      examples: [\"if event-bot isn't paused:\"],\n    },\n    {\n      description: \"Check if a bot is playing something in a guild\",\n      name: \"Bot is playing\",\n      patterns: [\n        \"%bot/string% is playing [in %guild%]\",\n        \"%bot/string% (is|are)(n't| not) playing [in %guild%]\",\n      ],\n      examples: [\"if event-bot is playing\"],\n    },\n    {\n      description:\n        \"If the guild modifier is included, this passes if the member is deafened via a guild admin.If it isn't included, it passes if the user has either deafened themselves, or was deafened by an admin\",\n      name: \"Member is deafened\",\n      patterns: [\n        \"%members% (is|are) [<guild>] deafened\",\n        \"%members% (is|are)(n't| not) [<guild>] deafened\",\n      ],\n      examples: [\n        \"discord command $checkGuildMute <member>:\",\n        \"\\ttrigger:\",\n        \"\\t\\tif arg-1 is guild muted:\",\n        '\\t\\t\\treply with \"%arg-1% is guild muted!\"',\n        \"\\t\\t\\tstop\",\n        '\\t\\treply with \"%arg-1% is not guild muted!\"',\n      ],\n    },\n    {\n      description: \"Check if a emote is animated.\",\n      name: \"Emote is Animated\",\n      patterns: [\n        \"%emotes% (is|are) animated\",\n        \"%emotes% (is|are)(n't| not) animated\",\n      ],\n      examples: [\n        \"discord command $emotes:\",\n        \"\\ttrigger:\",\n        \"\\t\\tloop emotes of event-guild:\",\n        \"\\t\\t\\tif loop-value is animated:\",\n        \"\\t\\t\\t\\tadd loop-value to {_animated::*}\",\n        \"\\t\\t\\telse:\",\n        \"\\t\\t\\t\\tadd loop-value to {_non::*}\",\n        \"\\t\\tcreate embed:\",\n        '\\t\\t\\tset the author info of the embed to author named \"Emotes %reaction \"\":smile:\"\"%\" with no url and no icon',\n        '\\t\\t\\tset the description of the embed to \"%name of event-guild% has %size of {_non::*}% regular emotes and %size of {_animated::*}% animated emotes!!\"',\n        \"\\t\\t\\tset the colour of the embed to Purple\",\n        '\\t\\t\\tadd field named \"Local emotes (1/1)\" with value \"%{_non::*}%\" to embed',\n        '\\t\\t\\tadd field named \"Animated emotes (1/1)\" with value \"%{_animated::*}%\" to embed',\n        \"\\t\\tsend the last created embed to event-channel with event-bot\",\n      ],\n    },\n    {\n      description:\n        \"Check if a member has a permission, can also check if they have a permission in a certain GuildChannel.\",\n      name: \"Member Has Permission\",\n      patterns: [\n        \"%member% has permission %permission% [in %-channel%]\",\n        \"%user% has permission %permission% [in %guild/channel%]\",\n        \"%member% (doesn[']t|does not) have permission %permission% [in %-channel%]\",\n        \"%user% (doesn[']t|does not) have permission %permission% [in %guild/channel%]\",\n      ],\n      examples: [\"if event-member has permission voice connect\"],\n    },\n    {\n      description:\n        \"Check if a member either does, or does not have either a specific %role% or a role with a certain name.\",\n      name: \"Member has role\",\n      patterns: [\n        \"%member% (has|have) [the] role %role%\",\n        \"%member% (does[n[']t]|does not) have [the] role %role%\",\n        \"%member% (has|have) [the] role [named] %string%\",\n        \"%member% (does[n[']t]|does not) have [the] role [named] %string%\",\n      ],\n      examples: [\n        \"discord command $role <member> <string>:\",\n        \"\\ttrigger:\",\n        \"\\t\\tif arg-1 has role named arg-2:\",\n        '\\t\\t\\treply with \"%arg-1% does have a role named %arg-2%\"',\n        \"\\t\\t\\tstop\",\n        '\\t\\treply with \"%arg-1% does not have a role named %arg-2%\"',\n      ],\n    },\n    {\n      description:\n        \"If the guild modifier is included, this passes if the member is muted via a guild admin.If it isn't included, it passes if the user has either muted themselves, or was muted by an admin\",\n      name: \"Member is muted\",\n      patterns: [\n        \"%members% (is|are) [<guild>] muted\",\n        \"%members% (is|are)(n't| not) [<guild>] muted\",\n      ],\n      examples: [\n        \"discord command $checkGuildMute <member>:\",\n        \"\\ttrigger:\",\n        \"\\t\\tif arg-1 is guild muted:\",\n        '\\t\\t\\treply with \"%arg-1% is guild muted!\"',\n        \"\\t\\t\\tstop\",\n        '\\t\\treply with \"%arg-1% is not guild muted!\"',\n      ],\n    },\n    {\n      description:\n        \"Lets you check if a channel builder or text channel is nsfw/sfw.\",\n      name: \"NSFW\",\n      patterns: [\n        \"[the] nsfw state[s] of %channelbuilders/textchannels%\",\n        \"%channelbuilders/textchannels%'[s] nsfw state[s]\",\n      ],\n      examples: [\n        \"discord command nsfw:\",\n        \"\\tprefixes: $\",\n        \"\\ttrigger:\",\n        \"\\t\\tif event-channel is nsfw:\",\n        '\\t\\t\\treply with \"%event-channel% is nsfw\"',\n      ],\n    },\n    {\n      description: \"Check if a message attachment is an image.\",\n      name: \"Attachment is Image\",\n      patterns: [\n        \"%attachments% (is|are) [a[n]] image[s]\",\n        \"%attachments% (is|are)(n't| not) [a[n]] image[s]\",\n      ],\n      examples: [\n        \"on guild message received:\",\n        \"\\tset {_} to attachment of event-message\",\n        \"\\tif {_} is set:\",\n        \"\\t\\tif {_} is not an image:\",\n        '\\t\\t\\tbroadcast \"%attachment url of {_}%\"',\n      ],\n    },\n    {\n      description:\n        \"This is for verified bots or bots that have enabled privileged intents and need to activate them in Vixio\",\n      name: \"Create Bot Scope\",\n      patterns: [\"(make|create) vixio bot\"],\n      examples: [\n        \"discord command neeko:\",\n        \"\\ttrigger:\",\n        \"\\t\\tcreate vixio bot:\",\n        \"\\t\\t\\tenable the guild members intent\",\n        '\\t\\t\\tlogin to \"YAHITAMUH\" with the name \"Neeko\"',\n      ],\n    },\n    {\n      description:\n        \"Provides a easy way to create either a text channel or a voice channel.\",\n      name: \"Create channel scope\",\n      patterns: [\"(make|create) [text] channel\", \"(make|create) voice channel\"],\n      examples: [\n        \"command /channel:\",\n        \"\\ttrigger:\",\n        \"\\t\\tcreate text channel:\",\n        '\\t\\tset name of the channel to \"Testing\"',\n        '\\t\\tset {guild} to guild with id \"56156156615611\"',\n        \"\\t\\tset nsfw state of the channel to true\",\n        '\\t\\tcreate the channel in {guild} with \"Jewel\"',\n      ],\n    },\n    {\n      description:\n        \"Provides a pretty and easy way of making a new embed with a bunch of different attributes\",\n      name: \"Make Embed\",\n      patterns: [\n        \"(make|create) (embed|embed %-embedbuilder%)\",\n        \"(make|create) (embed|embed %-embedbuilder%) and send [(it|the embed)] to %users/channels% [(with|using) %bot/string%] [and store (it|the message) in %-objects%]\",\n        \"(make|create) (embed|embed %-embedbuilder%) and reply with [(it|the embed)] [and store (it|the message) in %-objects%]\",\n      ],\n      examples: [\n        \"command $scope:\",\n        \"\\ttrigger:\",\n        \"\\t\\tmake a new embed:\",\n        \"\\t\\t\\tset color of embed the embed to red\",\n        '\\t\\t\\tset url of the embed to \"https://google.com\"',\n        '\\t\\t\\tset title of the embed to \"Google!\"',\n        \"\\t\\tset {_embed} to last made embed\",\n      ],\n    },\n    {\n      description: \"Create an invitation to a channel within a guild.\",\n      name: \"Create Invite to\",\n      patterns: [\n        \"(make|create) [a[n]] invite to %channel% [(with|as) %bot/string%]\",\n      ],\n      examples: [\n        \"discord command invite:\",\n        \"\\tprefixes: /\",\n        \"\\ttrigger:\",\n        \"\\t\\tcreate invite to event-channel:\",\n        \"\\t\\t\\tset the max usage of the invite to 1\",\n        '\\t\\treply with \"Done!\"',\n      ],\n    },\n  ],\n  Effects: [\n    {\n      description:\n        \"This will force a bot to play a track and set the current playing track to be next in the queue. If the input isn't a single track or not able to be found it will not affect the bot.\",\n      name: \"Force Play\",\n      patterns: [\"force [%bot/string% to] play %string/track% [in %guild%]\"],\n      examples: [\n        'force play \"some youtube url im too lazy to go find one\" in event-guild',\n      ],\n    },\n    {\n      description: \"Join a voice channel with a bot\",\n      name: \"Join voice channel\",\n      patterns: [\"join %voicechannel% [with %bot/string%]\"],\n      examples: [\"join event-channel\"],\n    },\n    {\n      description: \"Make a bot leave it's voice channel in a guild.\",\n      name: \"Leave Voice Channel\",\n      patterns: [\n        \"make %bots/strings% (leave|disconnect from) (voice|vc) [in %guild%]\",\n      ],\n      examples: [\n        \"discord command leave:\",\n        \"\\tprefixes: ##\",\n        \"\\ttrigger:\",\n        \"\\t\\tif voice channel of event-bot in event-guild is set:\",\n        \"\\t\\t\\tmake event-bot leave vc\",\n        '\\t\\t\\treply with \"I\\'ve left my voice channel\"',\n        \"\\t\\t\\tstop\",\n        '\\t\\treply with \"I\\'m not currently in any voice channels!\"',\n      ],\n    },\n    {\n      description:\n        \"Pause a track a bot is playing in a guild, if it is already paused nothing happens\",\n      name: \"Pause track\",\n      patterns: [\n        \"pause [the] (track|song) %bot/string% is playing [in %guild%]\",\n      ],\n      examples: [\"pause the track event-bot is playing in event-guild\"],\n    },\n    {\n      description:\n        \"Play a specific audio track or attempt to load something from a URL\",\n      name: \"Play audio\",\n      patterns: [\"play %strings/tracks% [in %guild%] [with %bot/string%]\"],\n      examples: [\n        'play \"https://www.youtube.com/watch?v=elwTgpHlty0\" in guild with id \"2199673352656165156\" with \"Jewel\"',\n      ],\n    },\n    {\n      description:\n        \"Resume a track a bot is playing in a guild, if the bot is not paused then nothing happens\",\n      name: \"Resume track\",\n      patterns: [\n        \"resume [the] (track|song|music) %bot/string% (is playing|has paused) [in %guild%]\",\n      ],\n      examples: [\"resume the track event-bot is playing\"],\n    },\n    {\n      description:\n        \"Lets you search various music sites for a query. You can either access the results via the search results expression, or store them in a variable.\",\n      name: \"Search Audio\",\n      patterns: [\n        \"search (youtube|soundcloud) for %strings% [and store the results in %listvariable%]\",\n      ],\n      examples: [\n        \"on join:\",\n        '\\tsearch youtube for \"%player%\" and store the results in {_results::*}',\n        \"\\tif {_results::*} is set:\",\n        '\\t\\tmessage \"Did you know there are %size of {_results::*}% videos about you on YouTube?\" to player',\n      ],\n    },\n    {\n      description: \"This will randomize a bots queue\",\n      name: \"Shuffle Queue\",\n      patterns: [\"shuffle [the] queue of %bot/string% [in %guild%]\"],\n      examples: [\"shuffle the queue of event-bot in event-guild\"],\n    },\n    {\n      description: \"Skip the current track a bot is playing in a guild\",\n      name: \"Skip track\",\n      patterns: [\n        \"skip [the] (track|song)[s] %bot/string% is playing [in %guilds%]\",\n      ],\n      examples: [\"skip track event-bot is playing in event-guild\"],\n    },\n    {\n      description: \"Stop a track a bot is playing in a guild\",\n      name: \"Stop track\",\n      patterns: [\n        \"stop [the] (track|song) %bot/string% is playing [in %guild%]\",\n      ],\n      examples: [\"stop the track event-bot is playing\"],\n    },\n    {\n      description:\n        \"Set a bot's game to a certain gametype. This can be: streaming/watching/playing/listening. For streaming you must include a valid twitch URL to stream to and a title.\",\n      name: \"Mark Bot as Gametype\",\n      patterns: [\n        \"mark %bot/string% as %gametype% [to] [with title] %string% [(and|on|with|at) url %-string%]\",\n      ],\n      examples: [\n        \"discord command watch <text>:\",\n        \"\\tprefixes: ##\",\n        \"\\ttrigger:\",\n        \"\\t\\tmark event-bot as watching arg-1\",\n        \"discord command play <text>:\",\n        \"\\tprefixes: ##\",\n        \"\\ttrigger:\",\n        \"\\t\\tmark event-bot as playing arg-1\",\n        \"discord command stream <text> <text>:\",\n        \"\\tprefixes: ##\",\n        \"\\ttrigger:\",\n        \"\\t\\tmark event-bot as streaming arg-1 with url arg-2\",\n        \"discord command listen <text>:\",\n        \"\\tprefixes: ##\",\n        \"\\ttrigger:\",\n        \"\\t\\tmark event-bot as listening to arg-1\",\n      ],\n    },\n    {\n      description:\n        \"Retrieve a User via their ID on Discord. This should be a fallback option! Use the user with id expression to get users normally. This searches all of discord, not just your accessible users.\",\n      name: \"Retrieve User by ID\",\n      patterns: [\n        \"(retrieve|grab) [the] user with id %string% [and store (them|the user) in %-objects%]\",\n      ],\n      examples: [\n        'retrieve user with id \"65156156156156\" and store them in {_message}',\n      ],\n    },\n    {\n      description:\n        \"Shutdown or logout of a bot, destroys the instance and closes the connection\",\n      name: \"Logout of Bot\",\n      patterns: [\"(logout [of]|shutdown) %bot/string%\"],\n      examples: [\n        \"discord command $shutdown:\",\n        \"\\ttrigger:\",\n        \"\\t\\tshutdown event-bot\",\n      ],\n    },\n    {\n      description:\n        \"This is used specifically to enable specific gateway intents in the create bot scope. This must be done before you login to your bot and you must restart for changes to take effect.\",\n      name: \"Enable Gateway Intent\",\n      patterns: [\"enable [the] %gatewayintent% [gateway] intent [for bot]\"],\n      examples: [\n        \"on skript load:\",\n        \"\\tcreate vixio bot:\",\n        \"\\t\\tenable the guild members intent\",\n        '\\t\\tlogin to \"YAHITAMUH\" with the name \"Neeko\"',\n      ],\n    },\n    {\n      description: \"Grab a number of messages from a text channel\",\n      name: \"Grab Messages\",\n      patterns: [\"grab [the] last %number% messages in %textchannel%\"],\n      examples: [\n        \"discord command $purge <number>:\",\n        \"\\texecutable in: guild\",\n        \"\\ttrigger:\",\n        \"\\t\\tset {_num} to arg-1 \",\n        \"\\t\\tgrab the last {_num} messages in event-channel\",\n        \"\\t\\tpurge the grabbed messages with event-bot\",\n        \"\\t\\tset {_error} to last vixio error \",\n        \"\\t\\tif {_error} is set:\",\n        '\\t\\t\\treply with \"I ran into an error! `%{_error}%`\"',\n        \"\\t\\t\\tstop\",\n        '\\t\\treply with \"I have successfully purged %arg-1% messages\"',\n      ],\n    },\n    {\n      description:\n        \"Grab the pinned messages of a channel or a dm with a user. Can be gotten with the last grabbed pinned messages expression.\",\n      name: \"Grab Pinned Messages\",\n      patterns: [\n        \"(retrieve|grab) pinned messages (of|in|with) %textchannel/user%\",\n      ],\n      examples: [\"grab pinned messages of event-channel\"],\n    },\n    {\n      description: \"Pin a message in a channel.\",\n      name: \"Pin Message\",\n      patterns: [\"pin %messages% [with %bot/string%]\"],\n      examples: [\"pin event-message in event-channel\"],\n    },\n    {\n      description: \"Make a bot start typing in a text channel.\",\n      name: \"Send typing\",\n      patterns: [\"send typing in %textchannel/user% [with %bot/string%]\"],\n      examples: [\"send typing in event-channel\"],\n    },\n    {\n      description:\n        \"This is for verified bots or bots that have enabled privileged intents and need to activate them in Vixio. The intents must be enabled before you login to your bot.\",\n      name: \"Login\",\n      patterns: [\n        \"(login|connect) to %string% (using|with) [the] name %string%\",\n      ],\n      examples: [\n        \"on skript load:\",\n        \"\\tcreate vixio bot:\",\n        \"\\t\\tenable the guild members intent\",\n        '\\t\\tlogin to \"YAHITAMUH\" with the name \"Neeko\"',\n      ],\n    },\n    {\n      description: \"Lets you mark a text channel as sfw/nsfw\",\n      name: \"Change NSFW\",\n      patterns: [\n        \"(make|mark) %textchannels% [as] [<n>]sfw (with|using) %bot/string%\",\n      ],\n      examples: [\n        \"discord command $nsfw <boolean>:\",\n        \"\\ttrigger:\",\n        \"\\t\\tif arg-1 is true:\",\n        \"\\t\\t\\tmark event-channel as nsfw with event-bot\",\n        \"\\t\\t\\tstop\",\n        \"\\t\\tmark event-channel as sfw with event-bot\",\n      ],\n    },\n    {\n      description: \"Bulk delete a bunch of messages.\",\n      name: \"Purge Messages\",\n      patterns: [\"purge %messages% with %bot/string%\"],\n      examples: [\n        \"discord command $purge <number>:\",\n        \"\\texecutable in: guild\",\n        \"\\ttrigger:\",\n        \"\\t\\tset {_num} to arg-1 \",\n        \"\\t\\tgrab the last {_num} messages in event-channel\",\n        \"\\t\\tpurge the grabbed messages with event-bot\",\n        \"\\t\\tset {_error} to last vixio error \",\n        \"\\t\\tif {_error} is set:\",\n        '\\t\\t\\treply with \"I ran into an error! `%{_error}%`\"',\n        \"\\t\\t\\tstop\",\n        '\\t\\treply with \"I have successfully purged %arg-1% messages\"',\n      ],\n    },\n    {\n      description:\n        \"Lets you enable or disable text to speech for message builders\",\n      name: \"Change TTS\",\n      patterns: [\"(enable|disable) t[ext ]t[o ]s[peech] for %messagebuilders%\"],\n      examples: [\"enable tts for {_message builder}\"],\n    },\n    {\n      description:\n        \"Pauses or resumes update's to a message's data. For example, if updates are pausedand a new reaction is added to the paused message, the message will still showas if it doesn't have that reaction.\",\n      name: \"Updates\",\n      patterns: [\"<pause|resume> updates (for|to) %messages%\"],\n      examples: [\n        \"on guild message receive:\",\n        \"\\tpause updates for event-message\",\n      ],\n    },\n    {\n      description:\n        \"Send a file to a channel or a user. You can input a direct URL to the file or a direct path to the local image/file.\",\n      name: \"Send file\",\n      patterns: [\n        \"upload %string% [with (message|embed) %-message/string%] to %user/channel% [with %bot/string%] [and store (it|the message) in %-objects%]\",\n      ],\n      examples: [\n        \"discord command $upload [<text>] [<text>]:\",\n        \"\\ttrigger:\",\n        \"\\t\\tif arg-1 is not set:\",\n        '\\t\\t\\tupload \"https://cdn.discordapp.com/attachments/236641445363056651/482328479288000513/e8873489-b8e8-41f0-bfdf-1af0e7f8689a.png\" to event-channel',\n        \"\\t\\t\\tstop\",\n        \"\\t\\tif arg-2 is not set:\",\n        \"\\t\\t\\tupload arg-1 to event-channel\",\n        \"\\t\\t\\tstop\",\n        \"\\t\\tupload arg-1 with message arg-2 to event-channel\",\n      ],\n    },\n    {\n      description:\n        \"Create either a voice channel or a text channel as requested.\",\n      name: \"Create channel\",\n      patterns: [\n        \"create text[(-| )]channel [named] %string% [in %guild%] [(as|with) %bot/string%]\",\n        \"create voice[(-| )]channel [named] %string% [in %guild%] [(as|with) %bot/string%]\",\n      ],\n      examples: [\n        \"discord command $create <text> <text>:\",\n        \"\\ttrigger:\",\n        '\\t\\tif arg-1 contains \"voice\":',\n        \"\\t\\t\\tcreate voice channel named arg-2\",\n        \"\\t\\t\\tstop\",\n        '\\t\\telse if arg-1 contains \"text\":',\n        \"\\t\\t\\tcreate text channel named arg-2\",\n        \"\\t\\t\\tstop\",\n        '\\t\\treply with \"The first argument must either be \"\"text\"\" or \"\"voice\"\"\"',\n      ],\n    },\n    {\n      description:\n        \"Clone a existing channel into either a new guild or the current guild under a new name.\",\n      name: \"Clone Channel\",\n      patterns: [\n        \"clone %channel% [in[to] %guild%] [with [the] [new] name %-string%] [(with|as) %bot/string%] [and store (it|the channel) in %-objects%]\",\n      ],\n      examples: ['clone event-channel with the new name \"Rawr!\"'],\n    },\n    {\n      description: \"Create a channel created with the create channel scope\",\n      name: \"Create Channel Builder\",\n      patterns: [\n        \"create %channelbuilder% in %guild% [(with|as) %bot/string%] [and store (it|the channel) in %-objects%]\",\n      ],\n      examples: [\n        \"discord command ##create:\",\n        \"\\ttrigger:\",\n        \"\\t\\tcreate voice channel:\",\n        '\\t\\t\\tset the name of the channel to \"{@bot}\"',\n        \"\\t\\t\\tset the bitrate of the channel to 69\",\n        \"\\t\\t\\tcreate the channel in event-guild\",\n      ],\n    },\n    {\n      description:\n        \"Create a emote in a specific guild, the first %string% can either be a direct url or a direct local path to a file.\",\n      name: \"Create emote\",\n      patterns: [\n        \"create emote %string% with [the] name %string% [in %guild%] [with %bot/string%]\",\n      ],\n      examples: [\n        \"discord command $createEmote <text> <text>:\",\n        \"\\ttrigger:\",\n        \"\\t\\tcreate emote arg-1 with name arg-2 \",\n        \"\\t\\twait 2 seconds\",\n        '\\t\\treply with \"%reaction arg-2%\"',\n      ],\n    },\n    {\n      description: \"Delete any deletable discord entity\",\n      name: \"Delete Discord Entity\",\n      patterns: [\n        \"delete discord entit(y|ies) %messages/channels/roles/guilds/categories/emote% [with %bot/string%]\",\n      ],\n      examples: [\"delete discord entity event-channel\"],\n    },\n    {\n      description:\n        \"Retrieve all of the banned users in a guild. The results are stored in the retrieved bans expression\",\n      name: \"Bans list\",\n      patterns: [\"(retrieve|grab) [the] (bans|ban list) of %guild%\"],\n      examples: [\n        \"discord command $bans:\",\n        \"\\ttrigger:\",\n        \"\\t\\tgrab bans of event-guild\",\n        \"\\t\\tset {_errors} to the last vixio error\",\n        \"\\t\\tif {_errors} is set:\",\n        '\\t\\t\\treply with \"I ran into an error! %{_errors}%\"',\n        \"\\t\\t\\tstop\",\n        '\\t\\treply with \"Here are the current bans: `%grabbed bans%`\"',\n      ],\n    },\n    {\n      description: \"Force a bot to leave a guild.\",\n      name: \"Make Bot leave Guild\",\n      patterns: [\"make %bot/string% leave %guild%\"],\n      examples: [\"make event-bot leave event-guild\"],\n    },\n    {\n      description:\n        \"Move a member to a different voice channel, they must already be in a voice channel to be moved.\",\n      name: \"Move Member to Voice Channel\",\n      patterns: [\"move %member% to %voicechannel% [with %bot/string%]\"],\n      examples: [\n        \"discord command $move <member> <string>:\",\n        \"\\ttrigger:\",\n        \"\\t\\tset {_voiceChannel} to voice channel with id arg-2\",\n        \"\\t\\tif {_voiceChannel} is not set:\",\n        '\\t\\t\\treply with \"I could not find a voice channel by that id\"',\n        \"\\t\\t\\tstop\",\n        \"\\t\\tmove arg-1 to {_voiceChannel}\",\n      ],\n    },\n    {\n      description: \"Allow, or deny a role or a member permissions to a channel\",\n      name: \"Member Permission in GuildChannel\",\n      patterns: [\n        \"(allow|deny) %roles/members% [the] permission[s] %permissions% [in %channels%] [with %bot/string%]\",\n      ],\n      examples: [\n        \"discord command grant <text> <permission>:\",\n        \"\\ttrigger:\",\n        '\\t\\tif id of event-guild is not \"219967335266648065\":',\n        \"\\t\\t\\tstop\",\n        \"\\t\\tset {_role} to role with id arg-1\",\n        \"\\t\\tallow {_role} the permission arg-2 in event-channel\",\n        \"\\t\\tdeny the public role of event-guild the permission arg-2 in event-channel\",\n      ],\n    },\n    {\n      description:\n        \"Create a invitation to a channel. Can store the newly created invite with the storage option or use the last created invite expression.\",\n      name: \"Create Invite to Channel\",\n      patterns: [\n        \"create a[n] (invite|invitation) to %channel% [with %bot/string%] [and store it in %-objects%]\",\n      ],\n      examples: [\n        \"discord command invite:\",\n        \"\\ttrigger:\",\n        \"\\t\\tcreate an invite to event-channel\",\n        '\\t\\treply with \"%the last created invite%\"',\n      ],\n    },\n    {\n      description:\n        \"Retrieve invites in a Guild or a Channel in a Guild. Must use the last retrieved invites expression to get them after calling this.\",\n      name: \"Retrieve Invites of\",\n      patterns: [\"(grab|retrieve) the invite(s| link[s]) of %guild/channel%\"],\n      examples: [\n        \"discord command test:\",\n        \"\\tprefixes: /\",\n        \"\\ttrigger:\",\n        \"\\t\\tretrieve the invites of event-guild\",\n        '\\t\\treply with \"%last grabbed invites%\"',\n      ],\n    },\n    {\n      description: \"Ban either a user, a member, or a user by their ID\",\n      name: \"Ban user\",\n      patterns: [\n        \"ban %users/strings% from %guild% [(due to|with reason|because of) %-string%] [and delete %-number% days [worth] of messages] [(with|as) %bot/string%]\",\n      ],\n      examples: [\n        \"command /ban <text>:\",\n        \"\\ttrigger:\",\n        '\\t\\tban arg-1 from guild with id \"622156156316116151\" due to \"Not following discord rules\" as \"Jewel\"',\n      ],\n    },\n    {\n      description:\n        \"Lets you deafen or undeafen a member/user. They must be in a voice channel for this to take effect.\",\n      name: \"Deafen user\",\n      patterns: [\"[<un>]deafen %members% [(with|using) %bot%]\"],\n      examples: [\n        \"discord command $deaf <member>:\",\n        \"\\ttrigger:\",\n        \"\\t\\tif voice channel of arg-1 is not set:\",\n        '\\t\\t\\treply with \"You cannot deaf or undeafen someone who is not in a voice channel\"',\n        \"\\t\\t\\tstop\",\n        \"\\t\\tif arg-1 is not guild deafened:\",\n        \"\\t\\t\\tdeafen arg-1 with event-bot\",\n        '\\t\\t\\treply with \"%arg-1% is now deaf\"',\n        \"\\t\\telse:\",\n        \"\\t\\t\\tundeafen arg-1 with event-bot\",\n        '\\t\\t\\treply with \"%arg-1% is no longer deafened\"',\n      ],\n    },\n    {\n      description: \"Kick either a user, a member, or a user by their ID\",\n      name: \"Kick user\",\n      patterns: [\n        \"kick %users/strings% from %guild% [(due to|with reason|because of) %-string%] [(with|as) %bot/string%]\",\n      ],\n      examples: [\n        \"command /kick <text>:\",\n        \"\\ttrigger:\",\n        '\\t\\tkick arg-1 from guild with id \"622156151\" due to \"Not following discord rules\" as \"Jewel\"',\n      ],\n    },\n    {\n      description: \"Either guild mute a member, or guild unmute a member.\",\n      name: \"Mute/UnMute a User/Member\",\n      patterns: [\"[<un>]mute %members% [(with|using) %bot%]\"],\n      examples: [\n        \"discord command $mute <member>:\",\n        \"\\ttrigger:\",\n        \"\\t\\tif voice channel of arg-1 is not set:\",\n        '\\t\\t\\treply with \"You cannot mute or unmute someone who is not in a voice channel\"',\n        \"\\t\\t\\tstop\",\n        \"\\t\\tif arg-1 is not guild muted:\",\n        \"\\t\\t\\tmute arg-1 with event-bot\",\n        '\\t\\t\\treply with \"%arg-1% is now muted\"',\n        \"\\t\\telse:\",\n        \"\\t\\t\\tunmute arg-1 with event-bot\",\n        '\\t\\t\\treply with \"%arg-1% is no longer muted\"',\n      ],\n    },\n    {\n      description: \"Un-ban a user from a guild as a bot.\",\n      name: \"Unban user from Guild\",\n      patterns: [\"unban %users/strings% from %guild% [(with|as) %bot/string%]\"],\n      examples: [\n        \"command /ban <text>:\",\n        \"\\ttrigger:\",\n        \"\\t\\tunban arg-1 from event-guild\",\n      ],\n    },\n    {\n      description: \"Acknowledge an interaction.\",\n      name: \"Acknowledge Interaction\",\n      patterns: [\"ack[nowledge] [the] interaction [event]\"],\n      examples: [\"on slash command received:\", \"\\tacknowledge interaction\"],\n    },\n    {\n      description: \"Create a new slash command.\",\n      name: \"Create Command\",\n      patterns: [\n        \"create command %string% with description %string% [in %-guild%] with %bot/string%\",\n      ],\n      examples: [\n        'create command \"say\" with description \"Say a message\" in event-guild',\n      ],\n    },\n    {\n      description: \"Allow, or deny a role or a member permissions to a command\",\n      name: \"Command Permission in Guild\",\n      patterns: [\n        \"(allow|deny|reset) %roles/users/members% access to %string% in %guild% [with %bot/string%]\",\n      ],\n      examples: [\n        \"discord command grant <text> <string>:\",\n        \"\\ttrigger:\",\n        '\\t\\tif id of event-guild is not \"219967335266648065\":',\n        \"\\t\\t\\tstop\",\n        \"\\t\\tset {_role} to role with id arg-1\",\n        \"\\t\\tallow {_role} access to arg-2 in event-guild\",\n        \"\\t\\tdeny {_role} access to arg-2 in event-guild\",\n      ],\n    },\n    {\n      description: \"Defer an interaction.\",\n      name: \"Defer Interaction\",\n      patterns: [\"defer [the] interaction [event] (silently|normally)\"],\n      examples: [\"on slash command received:\", \"\\tdefer interaction\"],\n    },\n    {\n      description: \"Send a follow up response to an interaction.\",\n      name: \"Interaction Follow Up Response\",\n      patterns: [\n        \"say interaction message (silently|normally) (and say|with) %messages/strings%\",\n      ],\n      examples: [\n        \"on slash command received:\",\n        '\\tsay interaction message normally with \"test\"',\n      ],\n    },\n    {\n      description: \"Respond to an interaction.\",\n      name: \"Respond to Interaction\",\n      patterns: [\n        \"respond to [the] interaction [event] (silently|normally) (and say|with) %messages/strings%\",\n      ],\n      examples: [\n        \"on slash command received:\",\n        '\\trespond to the interaction normally with \"test\"',\n      ],\n    },\n    {\n      description:\n        \"Add text to a Message Builder. If you include the word 'line' then it will append a new line for you after your text.\",\n      name: \"Append String to Message Buillder\",\n      patterns: [\"append [line] %strings% to %messagebuilder%\"],\n      examples: [\n        \"command /build:\",\n        \"\\ttrigger:\",\n        \"\\t\\tset {e} to a new message builder\",\n        '\\t\\tset text of {e} to \"Hello\"',\n        '\\t\\tappend \" World!\" to {e}',\n        'broadcast \"The final product is: %text of {e}%\"',\n      ],\n    },\n    {\n      description:\n        \"Add a reaction to a message, can get a reaction with the reaction %string% expression\",\n      name: \"Add Reaction to Message\",\n      patterns: [\"add %emotes% to %messages% [with %bot/string%]\"],\n      examples: ['add reaction \"smile\" to event-message with \"Jewel\"'],\n    },\n    {\n      description:\n        \"A more natural way to edit a message. Don't forget that you can only edit your own messages.\",\n      name: \"Edit Message\",\n      patterns: [\"edit %messages% to (show|say) %message/string%\"],\n      examples: [\n        \"discord command $edit:\",\n        \"\\ttrigger:\",\n        '\\t\\treply with \"Ping\" and store it in {_msg}',\n        '\\t\\tedit {_msg} to show \"Pong!\"',\n      ],\n    },\n    {\n      description:\n        \"Remove a specific users emote from a message, this is for removing a users reacted emote in the reaction add event mostly.\",\n      name: \"Remove Emote by User\",\n      patterns: [\n        \"remove %emotes% added by %user% from %message% [with %bot/string%]\",\n      ],\n      examples: [\n        \"on reaction added:\",\n        \"\\tremove event-emote added by event-user from event-message\",\n      ],\n    },\n    {\n      description: \"Reply to a message.\",\n      name: \"Reply to Message\",\n      patterns: [\n        \"reply to %messages% (with|without) mention and say %message/string% [and store (it|the message) in %-objects%]\",\n      ],\n      examples: [\n        \"discord command reply:\",\n        \"\\ttrigger:\",\n        '\\t\\treply to event-message with mention and say \"Replied\"',\n      ],\n    },\n    {\n      description: \"Reply with a message in a event\",\n      name: \"Reply with\",\n      patterns: [\n        \"reply with %messages/strings% [and store (it|the message) in %-objects%]\",\n      ],\n      examples: ['reply with \"Hello %mention tag of event-user%\"'],\n    },\n    {\n      description: \"Get a Message via it's ID from a Guild/TextChannel\",\n      name: \"Retrieve message with id\",\n      patterns: [\n        \"retrieve message [with id] %string% [(in|from) %channel/user%]\",\n      ],\n      examples: [\n        \"discord command $addReaction <text> <text>:\",\n        \"\\ttrigger:\",\n        \"\\t\\tretrieve message with id arg-1 \",\n        \"\\t\\tif last retrieved message is not set:\",\n        '\\t\\t\\treply with \"Could not find a message with that id!\"',\n        \"\\t\\t\\tstop\",\n        \"\\t\\tadd reaction arg-2 to reactions of last retrieved message with event-bot\",\n      ],\n    },\n    {\n      description: \"Send a message to either a user or a text channel.\",\n      name: \"Send Message\",\n      patterns: [\n        \"send %message/string/messagebuilder/embedbuilder% to %channels/users% with %bot/string% [and store (it|the message) in %-objects%]\",\n      ],\n      examples: [\n        \"discord command $send <text> [<text>]:\",\n        \"\\ttrigger:\",\n        \"\\t\\tif arg-2 is not set:\",\n        \"\\t\\t\\tsend arg-1 to event-channel with event-bot\",\n        \"\\t\\t\\tstop\",\n        \"\\t\\tset {_channel} to channel with id arg-2\",\n        \"\\t\\tif {_channel} is not set:\",\n        '\\t\\t\\treply with \"I could not find a channel with that id!\"',\n        \"\\t\\t\\tstop\",\n        \"\\t\\tsend arg-1 to {_channel} with event-bot\",\n      ],\n    },\n    {\n      description: \"Delete a %message% with a specific bot\",\n      name: \"Delete message\",\n      patterns: [\"delete %message% with %bot/string%\"],\n      examples: ['delete event-message with \"Jewel\"'],\n    },\n  ],\n  Expressions: [\n    {\n      description: \"Check if a bot is paused or not. Can be set to true/false.\",\n      name: \"Bot paused state\",\n      patterns: [\"%bot/string% paused state [in %guild%]\"],\n      examples: [\n        \"discord command $pause:\",\n        \"\\texecutable in: guild\",\n        \"\\ttrigger:\",\n        \"\\t\\tif event-bot is paused:\",\n        \"\\t\\t\\tset event-bot paused state to false\",\n        '\\t\\t\\treply with \"I\\'m no longer paused\"',\n        \"\\t\\t\\tstop\",\n        \"\\t\\tset event-bot paused state to true\",\n        '\\t\\treply with \"I\\'m now paused\"',\n      ],\n    },\n    {\n      description:\n        \"Get all the tracks a bot currently has queued up for a guild.\",\n      name: \"Queue of bot\",\n      patterns: [\"[the] queue of %bot/string% [in %guild%]\"],\n      examples: [\n        \"discord command $reset:\",\n        \"\\ttrigger:\",\n        \"\\t\\treset the queue of event-bot\",\n        '\\t\\treply with \"You have successfully cleared my queue\"',\n      ],\n    },\n    {\n      description: \"Get the tracks a bot is playing in a specific guild.\",\n      name: \"Track Bot Is Playing\",\n      patterns: [\"[the] track[s] %bot/string% is playing [in %guild%]\"],\n      examples: [\n        \"discord command $info:\",\n        \"\\ttrigger:\",\n        \"\\t\\tset {_track} to track event-bot is playing\",\n        \"\\t\\tif {_track} is not set:\",\n        '\\t\\t\\treply with \"I am not currently playing anything!\"',\n        \"\\t\\t\\tstop\",\n        '\\t\\treply with \"I am currently playing %name of {_track}% by %author of {_track}%\"',\n      ],\n    },\n    {\n      description:\n        \"Get the volume a bot is set to in a guild. Can be set to a number that is between 0 and 150. This can also be reset which sets the volume to 150. Anything over 150 is ignored and the volume is set to 150.\",\n      name: \"Volume of bot\",\n      patterns: [\"[the] volume of %bot/string% [in %guild%]\"],\n      examples: [\n        \"discord command $volume [<number>]:\",\n        \"\\ttrigger:\",\n        \"\\t\\tif arg-1 is not set:\",\n        '\\t\\t\\treply with \"%volume of event-bot%\"',\n        \"\\t\\t\\tstop\",\n        \"\\t\\tset the volume of event-bot to arg-1\",\n        '\\t\\treply with \"My volume is now: `%volume of event-bot%`\"',\n      ],\n    },\n    {\n      description:\n        \"Get the type of game a user, a bot, or a bot specified by name is playing.\",\n      name: \"Game type\",\n      patterns: [\n        \"[the] game type[s] of %bots/users/strings%\",\n        \"%bots/users/strings%'[s] game type[s]\",\n      ],\n      examples: [\n        \"discord command $streaming <user>:\",\n        \"\\ttrigger:\",\n        \"\\t\\tset {_type} to the game type of event-user\",\n        \"\\t\\tif {_type} is streaming:\",\n        '\\t\\t\\treply with \"%arg-1% is live!\"',\n        \"\\t\\t\\tstop\",\n        '\\t\\treply with \"%arg-1% is not streaming currently\"',\n      ],\n    },\n    {\n      description: \"Get all enabled Gateway intentions a bot has\",\n      name: \"Gateway Intents of bot\",\n      patterns: [\n        \"[the] [gateway] intent[s] of %bot/string%\",\n        \"%bot/string%'[s] [gateway] intent[s]\",\n      ],\n      examples: [\"gateway intents of event-bot\"],\n    },\n    {\n      description: \"Get all the guilds of a bot\",\n      name: \"Guilds of bot\",\n      patterns: [\"[the] guild[s] of %bot/string%\", \"%bot/string%'[s] guild[s]\"],\n      examples: [\"guilds of event-bot\"],\n    },\n    {\n      description:\n        \"Get all the guilds a user and a bot share. The bot may be assumed in events.\",\n      name: \"Mutual Guild of User\",\n      patterns: [\n        \"[the] mutual guilds (of|with) %user% [and %bot/string%]\",\n        \"%user%[[']s] and %bot/string%[[']s] mutual guilds\",\n      ],\n      examples: [\n        \"discord command $mutual <user>:\",\n        \"\\ttrigger:\",\n        '\\t\\treply with \"I share %size of mutual guilds of arg-1% guilds with %arg-1%\"',\n      ],\n    },\n    {\n      description:\n        \"Get the amount of time a bot has been up in a skript date form.\",\n      name: \"Uptime Of Bot\",\n      patterns: [\n        \"[the] uptime[s] of %strings/bots%\",\n        \"%strings/bots%'[s] uptime[s]\",\n      ],\n      examples: [\n        \"discord command $uptime:\",\n        \"\\ttrigger:\",\n        '\\t\\treply with \"I\\'ve been awake for %uptime of event-bot%\"',\n      ],\n    },\n    {\n      description: \"Get the channel in a create channel scope\",\n      name: \"The Channel\",\n      patterns: [\"[(the|a)][new] channel[(-| )builder]\"],\n      examples: [\n        \"discord command $setup:\",\n        \"\\ttrigger:\",\n        \"\\t\\tcreate text channel:\",\n        '\\t\\t\\tset the name of the channel to \"Bot channel\"',\n        '\\t\\t\\tset the topic of the channel to \"Hi Pika\"',\n        \"\\t\\t\\tcreate the channel in event-guild and store it in {_chnl}\",\n      ],\n    },\n    {\n      description:\n        \"Get the bitrate of a channel builder. The default value is 64kbps for channel builders. Rates multiplied by 1000.You can set or reset this (resets to 64kbps)\",\n      name: \"Bitrate of channel builder\",\n      patterns: [\n        \"[the] bitrate[s] of %channelbuilders%\",\n        \"%channelbuilders%'[s] bitrate[s]\",\n      ],\n      examples: [\n        \"discord command $create:\",\n        \"\\ttrigger:\",\n        \"\\t\\tcreate voice channel:\",\n        '\\t\\t\\tset the name of the channel to \"{@bot}\"',\n        \"\\t\\t\\tset the bitrate of the channel to 69\",\n        \"\\t\\t\\tcreate the channel in event-guild\",\n      ],\n    },\n    {\n      description: \"Get or sets the user limit of a channel builder\",\n      name: \"User limit of a channel builder\",\n      patterns: [\n        \"[the] user limit[s] of %channelbuilders%\",\n        \"%channelbuilders%'[s] user limit[s]\",\n      ],\n      examples: [\n        \"discord command $create:\",\n        \"\\ttrigger:\",\n        \"\\t\\tcreate voice channel:\",\n        '\\t\\t\\tset the name of the channel to \"{@bot}\"',\n        \"\\t\\t\\tset the user limit of the channel to 5\",\n        \"\\t\\tcreate the last made channel in event-guild and store it in {_chnl}\",\n        '\\t\\treply with \"I have successfully created the channel! ID: %id of {_chnl}%\"',\n      ],\n    },\n    {\n      description: \"Get the name of a channel builder. Can be set to a string.\",\n      name: \"Name of Channel Builder\",\n      patterns: [\n        \"[the] name[s] of %channelbuilders%\",\n        \"%channelbuilders%'[s] name[s]\",\n      ],\n      examples: [\n        \"discord command $create <text>:\",\n        \"\\ttrigger:\",\n        \"\\t\\tcreate text channel:\",\n        \"\\t\\t\\tset the name of the channel to arg-1\",\n        \"\\t\\tcreate the last made channel in event-guild and store it in {_chnl}\",\n        '\\t\\treply with \"I have successfully created the channel! ID: %id of {_chnl}%\"',\n      ],\n    },\n    {\n      description:\n        \"Returns whether or not a channel builder is NSFW (false by default). Can be set to either true or false.\",\n      name: \"NSFW State of a channel builder\",\n      patterns: [\n        \"[the] nsfw state[s] of %channelbuilders%\",\n        \"%channelbuilders%'[s] nsfw state[s]\",\n      ],\n      examples: [\n        \"discord command $create <text> <boolean>:\",\n        \"\\ttrigger:\",\n        \"\\t\\tcreate text channel:\",\n        \"\\t\\t\\tset the name of the channel to arg-1\",\n        \"\\t\\t\\tset the nsfw state of the channel to arg-2\",\n        \"\\t\\tcreate the last made channel in event-guild and store it in {_chnl}\",\n        \"\\t\\treply with \\\"I've successfully created a channel named `%arg-1%`\",\n        ' ID: %id of {_chnl}%\"',\n      ],\n    },\n    {\n      description: \"Get or set the category of a channel builder.\",\n      name: \"Category of channel builder\",\n      patterns: [\n        \"[the] (category|parent)[s] of %channelbuilders%\",\n        \"%channelbuilders%'[s] (category|parent)[s]\",\n      ],\n      examples: [\n        \"discord command $create <text>:\",\n        \"\\ttrigger:\",\n        \"\\t\\tcreate text channel:\",\n        \"\\t\\t\\tset the name of the channel to arg-1 \",\n        '\\t\\t\\tset the parent of the channel to category named \"xd\"',\n        \"\\t\\tcreate the last made channel in event-guild and store it in {_chnl}\",\n        \"\\t\\treply with \\\"I've successfully created a channel named `%arg-1%`\",\n        ' ID: %id of {_chnl}%\"',\n      ],\n    },\n    {\n      description: \"Gets or sets the topic of a channel builder.\",\n      name: \"Topic of channel builder\",\n      patterns: [\n        \"[the] topic[s] of %channelbuilders%\",\n        \"%channelbuilders%'[s] topic[s]\",\n      ],\n      examples: [\n        \"discord command $create <text>:\",\n        \"\\ttrigger:\",\n        \"\\t\\tcreate text channel:\",\n        \"\\t\\t\\tset the name of the channel to arg-1 \",\n        '\\t\\t\\tset the topic of the channel to \"Hi Pika\"',\n        \"\\t\\tcreate the last made channel in event-guild and store it in {_chnl}\",\n        \"\\t\\treply with \\\"I've successfully created a channel named `%arg-1%`\",\n        ' ID: %id of {_chnl}%\"',\n      ],\n    },\n    {\n      description:\n        \"Get the last made Channel Builder created via the Channel Builder scope.\",\n      name: \"Last Created Channel Builder\",\n      patterns: [\"[the] last[ly] [(made|created)] channel[[ ]builder]\"],\n      examples: [\n        \"discord command $create <text>:\",\n        \"\\ttrigger:\",\n        \"\\t\\tcreate text channel:\",\n        \"\\t\\t\\tset the name of the channel to arg-1 \",\n        '\\t\\t\\tset the topic of the channel to \"Hi Pika\"',\n        \"\\t\\tcreate the last made channel in event-guild and store it in {_chnl}\",\n        \"\\t\\treply with \\\"I've successfully created a channel named `%arg-1%`\",\n        ' ID: %id of {_chnl}%\"',\n      ],\n    },\n    {\n      description:\n        \"Get the bitrate of a voice channel. The default value is 64kbps for channel builders. Rates multiplied by 1000. You can set or reset this (resets to 64kbps)\",\n      name: \"Bitrate of Voice Channel\",\n      patterns: [\n        \"[the] bitrate[s] of %voicechannels%\",\n        \"%voicechannels%'[s] bitrate[s]\",\n      ],\n      examples: [\n        \"discord command $bitrate <string> <number>:\",\n        \"\\ttrigger:\",\n        \"\\t\\tset bitrate of voice channel with id arg-1 to arg-2\",\n      ],\n    },\n    {\n      description: \"Get or sets the user limit of a voice channel\",\n      name: \"User limit of Voice Channel\",\n      patterns: [\n        \"[the] user limit[s] of %voicechannels%\",\n        \"%voicechannels%'[s] user limit[s]\",\n      ],\n      examples: [\n        \"discord command $bitrate <string> <number>:\",\n        \"\\ttrigger:\",\n        \"\\t\\tset user limit of voice channel with id arg-1 to arg-2 with event-bot\",\n      ],\n    },\n    {\n      description:\n        \"Get a channel via it's name, you can include the type of channel and/or the guild to speed the retrieval process up. The searching is case sensitive.\",\n      name: \"Channel Named\",\n      patterns: [\n        \"[(voice|text)][(-| )]channel[s] named %string% [in %-guild%]\",\n      ],\n      examples: [\n        \"discord command move <text>:\",\n        \"\\ttrigger:\",\n        \"\\t\\tset {_} to voice channel named arg-1\",\n        \"\\t\\tif voice channel of event-member is not set:\",\n        '\\t\\t\\treply with \"Not in vc to move to\"',\n        \"\\t\\t\\tstop\",\n        \"\\t\\tmove event-member to {_}\",\n        '\\t\\treply with \"Done! %event-member% was moved to %{_}%\"',\n      ],\n    },\n    {\n      description:\n        \"Returns whether or not a channel is NSFW (false by default). This can be set to a boolean or reset.\",\n      name: \"NSFW state of Text Channel\",\n      patterns: [\n        \"[the] nsfw state[s] of %textchannels%\",\n        \"%textchannels%'[s] nsfw state[s]\",\n      ],\n      examples: [\n        \"discord command nsfw <boolean>:\",\n        \"\\tprefixes: $\",\n        \"\\ttrigger:\",\n        \"\\t\\tset nsfw state of event-channel to arg-1\",\n      ],\n    },\n    {\n      description: \"Get or set the category of a channel.\",\n      name: \"Category of Channel\",\n      patterns: [\n        \"[the] (category|parent)[s] of %channels%\",\n        \"%channels%'[s] (category|parent)[s]\",\n      ],\n      examples: [\n        \"discord command $category <string> <string>:\",\n        \"\\ttrigger:\",\n        \"\\t\\tset {_category} to category named arg-2\",\n        \"\\t\\tset {_channel} to channel with id arg-1\",\n        \"\\t\\tset parent of {_channel} to {_category} with event-bot\",\n        '\\t\\treply with \"Successfully moved %{_channel}% to %{_category}%\"',\n      ],\n    },\n    {\n      description:\n        \"Get or set the current position of a role or a channel. With channels, 0 is the highest channel, with roles 0 is the lowest custom role, then 1 is the next role up, then 2...\",\n      name: \"Position of\",\n      patterns: [\n        \"[the] discord position[s] of %channels/roles%\",\n        \"%channels/roles%'[s] discord position[s]\",\n      ],\n      examples: [\n        \"discord command $pos <text>:\",\n        \"\\ttrigger:\",\n        \"\\t\\tset {_vc} to channel with id arg-1\",\n        '\\t\\treply with \"%{_vc}%\"',\n        '\\t\\treply with \"%discord position of {_vc}%\"',\n      ],\n    },\n    {\n      description:\n        \"Get or set the topic of a text channel. You may also delete the topic to reset it.\",\n      name: \"Topic of Text Channel\",\n      patterns: [\n        \"[the] topic[s] of %textchannels%\",\n        \"%textchannels%'[s] topic[s]\",\n      ],\n      examples: ['set topic of event-channel to \"Hi Pika\" with event-bot'],\n    },\n    {\n      description: \"Get or set the type of a channel.\",\n      name: \"Type of Channel\",\n      patterns: [\"[the] type[s] of %channels%\", \"%channels%'[s] topic[s]\"],\n      examples: ['set type of event-channel to \"TEXT\" with event-bot'],\n    },\n    {\n      description:\n        \"Get the grabbed messages from the grab messages effect. This can be used in the purge effect to purge the messages.\",\n      name: \"Grabbed Messages\",\n      patterns: [\"[the] grabbed messages\"],\n      examples: [\n        \"discord command $purge <number>:\",\n        \"\\texecutable in: guild\",\n        \"\\ttrigger:\",\n        \"\\t\\tset {_num} to arg-1 \",\n        \"\\t\\tgrab the last {_num} messages in event-channel\",\n        \"\\t\\tpurge the grabbed messages with event-bot\",\n        \"\\t\\tset {_error} to last vixio error \",\n        \"\\t\\tif {_error} is set:\",\n        '\\t\\t\\treply with \"I ran into an error! `%{_error}%`\"',\n        \"\\t\\t\\tstop\",\n        '\\t\\treply with \"I have successfully purged %arg-1% messages\"',\n      ],\n    },\n    {\n      description: \"Get the results of the last grab pinned messages search.\",\n      name: \"Last Retrieved Pins\",\n      patterns: [\"[last] (grabbed|retrieved) (pins|pinned messages)\"],\n      examples: [\n        \"discord command $pins:\",\n        \"\\ttrigger:\",\n        \"\\t\\tgrab pinned messages in event-channel\",\n        '\\t\\treply with \"%grabbed pins%\"',\n      ],\n    },\n    {\n      description:\n        \"Set the slowmode of a text channel. Only text channels can have have their slowmode set and retrieved. This can be set, reset, and deleted.\",\n      name: \"Slowmode of TextChannel\",\n      patterns: [\n        \"[the] slowmode[s] of %channel/textchannel%\",\n        \"%channel/textchannel%'[s] slowmode[s]\",\n      ],\n      examples: ['broadcast \"slowmode of event-channel\"'],\n    },\n    {\n      description: \"Returns the used alias in a command\",\n      name: \"Used Alias\",\n      patterns: [\"[the] used alias\"],\n      examples: [\"broadcast the used alias\"],\n    },\n    {\n      description: \"Returns the aliases of a command\",\n      name: \"Aliases of command\",\n      patterns: [\n        \"[the] [<usable>] aliases[s] of %discordcommands%\",\n        \"%discordcommands%'[s] [<usable>] aliases[s]\",\n      ],\n      examples: [\n        'broadcast aliases of \"commandname\" parsed as a discord command',\n      ],\n    },\n    {\n      description: \"Represents the argument of a command\",\n      name: \"Last Argument\",\n      patterns: [\"[the] last arg[ument][s]\"],\n      examples: [\n        \"discord command say <string>:\",\n        \"\\tprefixes: !\",\n        \" . and ;\",\n        \"\\ttrigger:\",\n        \"\\t\\treply with arg-1 # replies with the first argument\",\n      ],\n    },\n    {\n      description: \"Returns the used command in a command\",\n      name: \"Used Command\",\n      patterns: [\"[the] used command\"],\n      examples: [\"broadcast aliases of the used command\"],\n    },\n    {\n      description: \"Returns all registered discord commands\",\n      name: \"All Commands\",\n      patterns: [\"[all] discord commands\"],\n      examples: [\n        \"loop all discord commands:\",\n        \"\\tbroadcast description of loop-value\",\n      ],\n    },\n    {\n      description: \"Returns the description of a command.\",\n      name: \"Description of Command\",\n      patterns: [\n        \"[the] description[s] of %discordcommands%\",\n        \"%discordcommands%'[s] description[s]\",\n      ],\n      examples: [\n        'broadcast description of \"commandname\" parsed as a discord command',\n      ],\n    },\n    {\n      description: \"Returns the used prefix in a command\",\n      name: \"Used Prefix\",\n      patterns: [\"[the] used prefix\"],\n      examples: [\"broadcast the used prefix\"],\n    },\n    {\n      description: \"Returns the prefixes of a command\",\n      name: \"Prefixes of command\",\n      patterns: [\n        \"[the] prefixes[s] of %discordcommands%\",\n        \"%discordcommands%'[s] prefixes[s]\",\n      ],\n      examples: [\n        'broadcast prefixes of \"commandname\" parsed as a discord command',\n      ],\n    },\n    {\n      description: \"Returns the type of channel a command was sent to\",\n      name: \"Command Recipient\",\n      patterns: [\"[the] command recipient\"],\n      examples: [\"broadcast the command recipient\"],\n    },\n    {\n      description: \"Returns the usage of a command.\",\n      name: \"Usage of Command\",\n      patterns: [\n        \"[the] usage[s] of %discordcommands%\",\n        \"%discordcommands%'[s] usage[s]\",\n      ],\n      examples: [\n        'broadcast usage of \"commandname\" parsed as a discord command',\n      ],\n    },\n    {\n      description:\n        \"If it isn't inside an embed scope, this expression returns a new embed. If it is inside of an embed scope, it returns the embed that belongs to that scope.\",\n      name: \"New/Current Embed\",\n      patterns: [\"[(the|an|[a] new)] embed\"],\n      examples: [\n        \"# outside a scope\",\n        \"set {_e} to a new embed\",\n        \"make embed:\",\n        \"\\tset color of embed the embed to red\",\n        '\\tset url of the embed to \"https://google.com\"',\n        '\\tset title of the embed to \"Google!\"',\n        \"set {_embed} to last made embed\",\n      ],\n    },\n    {\n      description: \"Returns the author of an embed. Can be set any author.\",\n      name: \"Author of Embed\",\n      patterns: [\n        \"[the] author[s] of %embedbuilders%\",\n        \"%embedbuilders%'[s] author[s]\",\n      ],\n      examples: [\n        'set author of {_embed} to an author named \"Hi Pika\" and icon \"https://i.imgur.com/TQgR2hW.jpg\" and url \"https://1a3dev.github.io/VixioSite/\"',\n      ],\n    },\n    {\n      description:\n        \"Returns the color of an embed. Can be set to any color (e.g. red).\",\n      name: \"Color of Embed\",\n      patterns: [\n        \"[the] colo[u]r[s] of %embedbuilders%\",\n        \"%embedbuilders%'[s] colo[u]r[s]\",\n      ],\n      examples: [\"set discord color of {_embed} to red\"],\n    },\n    {\n      description:\n        \"Returns the description of an embed. Can be set to any string.\",\n      name: \"Description of Embed\",\n      patterns: [\n        \"[the] description[s] of %embedbuilders%\",\n        \"%embedbuilders%'[s] description[s]\",\n      ],\n      examples: [\n        'set the description of {_embed} to \"This is a cool description!\"',\n      ],\n    },\n    {\n      description: \"Returns a embed's fields\",\n      name: \"Fields Of Embed\",\n      patterns: [\n        \"[the] field[s] of %embedbuilders%\",\n        \"%embedbuilders%'[s] field[s]\",\n      ],\n      examples: [\"set {_fields::*} to fields of {_embed}\"],\n    },\n    {\n      description: \"Returns the footer of an embed. Can be set any footer.\",\n      name: \"Footer of Embed\",\n      patterns: [\n        \"[the] footer[s] of %embedbuilders%\",\n        \"%embedbuilders%'[s] footer[s]\",\n      ],\n      examples: [\n        'set footer of {_embed} to a footer with text \"Hi Pika\" and icon \"https://i.imgur.com/TQgR2hW.jpg\"',\n      ],\n    },\n    {\n      description: \"Returns the image of an embed. Can be set any url.\",\n      name: \"Image of Embed\",\n      patterns: [\n        \"[the] image[s] of %embedbuilders%\",\n        \"%embedbuilders%'[s] image[s]\",\n      ],\n      examples: [\n        'set the image of {_embed} to \"https://i.imgur.com/TQgR2hW.jpg\"',\n      ],\n    },\n    {\n      description: \"Get the Embed of a Message\",\n      name: \"Embed of Message\",\n      patterns: [\"[the] embeds[s] of %messages%\", \"%messages%'[s] embeds[s]\"],\n      examples: ['broadcast \"%embeds of event-message%\"'],\n    },\n    {\n      description:\n        \"Returns the thumbnail of an embed. Can be set to any string (e.g. https://i.imgur.com/TQgR2hW.jpg).\",\n      name: \"Thumbnail of Embed\",\n      patterns: [\n        \"[the] (thumbnail|icon)[s] of %embedbuilders%\",\n        \"%embedbuilders%'[s] (thumbnail|icon)[s]\",\n      ],\n      examples: [\n        'set the thumbnail of {_embed} to \"https://i.imgur.com/TQgR2hW.jpg\"',\n      ],\n    },\n    {\n      description: \"Returns the title of an embed.\",\n      name: \"Title of Embed\",\n      patterns: [\n        \"[the] title[s] of %embedbuilders%\",\n        \"%embedbuilders%'[s] title[s]\",\n      ],\n      examples: [\n        'set the embed title of {_embed} to title with text \"hey this is a cool title!\" and no icon',\n      ],\n    },\n    {\n      description:\n        \"Lets you easily make an embed with a couple common properties.\",\n      name: \"Inline Embed\",\n      patterns: [\n        \"%embedbuilder% ((with|and) [the] title %-string%|titled %-string%)\",\n        \"%embedbuilder% (with|and) [the] description %string%\",\n      ],\n      examples: [\n        'set {_embed} to a new embed with the title \"Title\" and the description \"Description\"',\n      ],\n    },\n    {\n      description: \"Returns the embed that was last made in a embed scope\",\n      name: \"Last Made Embed\",\n      patterns: [\"[the] last[ly] [(made|created)] embed[[ ]builder]\"],\n      examples: [\"set {_embed} to the last embed\"],\n    },\n    {\n      description: \"Returns the url of a title.\",\n      name: \"Url of Title\",\n      patterns: [\n        \"[the] (url|link)[s] of %titles%\",\n        \"%titles%'[s] (url|link)[s]\",\n      ],\n      examples: ['broadcast \"%link of {_embed}\\'s title%\"'],\n    },\n    {\n      description:\n        \"Returns a dimension of an embed's thumbnail, image, footer icon or icon. You can specify either width or height.\",\n      name: \"Dimension of Image\",\n      patterns: [\n        \"[the] <width|height>[s] of %thumbnails/imageinfos%\",\n        \"%thumbnails/imageinfos%'[s] <width|height>[s]\",\n      ],\n      examples: ['reply with \"%width of {_embed}\\'s thumbnail%\"'],\n    },\n    {\n      description:\n        \"Returns the url of an embed's thumbnail, footer icon, author, icon or large image. Adding the proxy modifier to the syntax will return Discord's proxy url if possible.\",\n      name: \"Url of Image\",\n      patterns: [\n        \"[the] [<proxy>] url[s] of %thumbnails/imageinfos/footers/authorinfos%\",\n        \"%thumbnails/imageinfos/footers/authorinfos%'[s] [<proxy>] url[s]\",\n      ],\n      examples: ['broadcast \"%proxy url of {_embed}\\'s thumbnail%\"'],\n    },\n    {\n      description: \"Returns a author with the specified data\",\n      name: \"New Author\",\n      patterns: [\n        \"[an] author named %string%[( and [the]|, )(icon %-string%|no icon)][( and [the]|, )(url %-string%|no url)]\",\n      ],\n      examples: [\n        'set author of {_embed} to an author named \"Hi Pika\" and icon \"https://i.imgur.com/TQgR2hW.jpg\" and url \"https://1a3dev.github.io/VixioSite/\"',\n      ],\n    },\n    {\n      description: \"Returns a field with the specified data\",\n      name: \"New Field\",\n      patterns: [\n        \"[(a|the)] (split|inline) field[s] [named %-string%] [with [the] value %-string%]\",\n        \"[(a|the)] field[s] [named %-string%] [with [the] value %-string%]\",\n      ],\n      examples: [\n        'set field of {_embed} to a split field named \"Super cool field\" and value \"Super cool value\"',\n      ],\n    },\n    {\n      description: \"Returns a footer with the specified data\",\n      name: \"New Footer\",\n      patterns: [\n        \"[a] footer with [the] text %string%[( and [the]|, )(icon %-string%|no icon)]\",\n      ],\n      examples: [\n        'set footer of {_embed} to a footer with text \"Hi Pika\" and icon \"https://i.imgur.com/TQgR2hW.jpg\"',\n      ],\n    },\n    {\n      description: \"Returns a title with the specified data\",\n      name: \"New Title\",\n      patterns: [\n        \"[a] title [with] [the] text %string%[( and [the]|, )((url|link) %-string%|no (url|link))]\",\n      ],\n      examples: [\n        'set title of {_embed} to a title with text \"Vixio\" and url \"https://i.imgur.com/TQgR2hW.jpg\"',\n      ],\n    },\n    {\n      description:\n        \"Get the new channel or previous channel for the member channel switch event.\",\n      name: \"New and Previous Channel\",\n      patterns: [\n        \"[the] (prev[ious]|old) [voice] channel\",\n        \"[the] new [voice] channel\",\n      ],\n      examples: [\n        \"on member switch voice channel:\",\n        '\\tbroadcast \"%event-user% left %old channel% and joined %new channel%\"',\n      ],\n    },\n    {\n      description:\n        \"A color that can be more specific that Skript's color type.\",\n      name: \"Color\",\n      patterns: [\n        \"[java[ ]]colo[u]r from rgb %number%(, | and )%number%(, | and )%number%\",\n      ],\n      examples: [\n        \"set {_color} to color from rgb 0\",\n        \" 0 and 0 # results in black\",\n        \"set {_color} to black # results in black\",\n        'set {_color} to \"black\" parsed as a color  # results in black',\n      ],\n    },\n    {\n      description:\n        \"Get a emoji by its name, if its a custom emote you must include the guild.\",\n      name: \"Emoji Named\",\n      patterns: [\"(emoji|emote|reaction)[s] %strings% [(from|in) %-guild%]\"],\n      examples: [\n        \"on guild message receive:\",\n        '\\tadd reaction \"smile\" to event-message',\n      ],\n    },\n    {\n      description: \"Get the guild of various types.\",\n      name: \"Guild of\",\n      patterns: [\n        \"[the] guild[s] of %channel/voicechannel/message/emote/category/role/member/invite%\",\n        \"%channel/voicechannel/message/emote/category/role/member/invite%'[s] guild[s]\",\n      ],\n      examples: [\"set {_guild} to guild of event-message\"],\n    },\n    {\n      description: \"Get the ID of any discord entity.\",\n      name: \"ID of\",\n      patterns: [\n        \"[the] discord id[s] of %channel/guild/bot/user/message/role/avatar/category/member/emote/attachment%\",\n        \"%channel/guild/bot/user/message/role/avatar/category/member/emote/attachment%'[s] discord id[s]\",\n      ],\n      examples: ['reply with \"%id of event-user%\"'],\n    },\n    {\n      description: \"Set when Vixio runs into a error, like a permission error.\",\n      name: \"Last Vixio Error\",\n      patterns: [\"[the] last vixio error\"],\n      examples: [\n        \"discord command $ban <member>:\",\n        \"\\ttrigger:\",\n        \"\\t\\tban arg-1 from event-guild \",\n        \"\\t\\tset {_error} to the last vixio error\",\n        \"\\t\\tif {_error} is set:\",\n        '\\t\\t\\treply with \"I tried to ban that user but didn\\'t have the perms!\"',\n      ],\n    },\n    {\n      description:\n        \"Get the mention tag of any discord entity that can be mentioned.\",\n      name: \"Mention of\",\n      patterns: [\n        \"[the] mention tag[s] of %users/channel/members/emotes/roles/textchannel%\",\n        \"%users/channel/members/emotes/roles/textchannel%'[s] mention tag[s]\",\n      ],\n      examples: [\"reply with mention tag of event-user\"],\n    },\n    {\n      description:\n        \"Get the name of any discord entity. You can set the name of channels, guilds, bots, categories, and channel builders.\",\n      name: \"Name of\",\n      patterns: [\n        \"[the] discord name[s] of %channel/guild/bot/user/role/track/category/emote/field/attachment%\",\n        \"%channel/guild/bot/user/role/track/category/emote/field/attachment%'[s] discord name[s]\",\n      ],\n      examples: ['broadcast \"%discord name of event-user%\"'],\n    },\n    {\n      description:\n        \"Get the new or previous nickname from the nick change event.\",\n      name: \"New and Previous Nicknames\",\n      patterns: [\"[the] prev[ious] nick[name]\", \"[the] new nick[name]\"],\n      examples: [\n        \"on nickname change:\",\n        '\\tbroadcast \"%event-member% has changed their nick from %prev nick% to %new nick%\"',\n      ],\n    },\n    {\n      description:\n        \"Get the roles that were added or removed in the member role added and member role removed events.\",\n      name: \"Added or Removed roles.\",\n      patterns: [\"[the] role[s]\"],\n      examples: [\"SOON\"],\n    },\n    {\n      description:\n        \"Represents the search results from the last usage of the search effect. The search results get reset every time the search effect is used.\",\n      name: \"Search Results\",\n      patterns: [\"[the] [last] search results\"],\n      examples: [\n        \"on join:\",\n        '\\tsearch youtube for \"%player%\" and store the results in {_results::*}',\n        \"\\tif search results are set:\",\n        '\\t\\tmessage \"Did you know there are %size of search results% videos about you on YouTube?\" to player',\n      ],\n    },\n    {\n      description:\n        \"Retrieve a user by their name. If the [s] is included in users than this will return a list.If the s is not included but their are multiple people with the same name, then the first one will be returned.This does NOT retrieve the user from Discord. This is from what your bots can see.\",\n      name: \"User Named\",\n      patterns: [\"user[s] (with [the] name|named) %string% [in %-guild%]\"],\n      examples: [\n        \"discord command user <text>:\",\n        \"\\ttrigger:\",\n        \"\\t\\tset {_} to user with the name arg-1 in event-guild\",\n        '\\t\\treply with \"Oh',\n        ' found them! %discord name of {_}%##%discriminator of {_}%\"',\n      ],\n    },\n    {\n      description:\n        \"Get all of the categories in a guild. You may add a category to this by name which creates a category, or delete/remove a category by inputting a category.\",\n      name: \"Categories of guild\",\n      patterns: [\n        \"[the] categories[s] of %guilds%\",\n        \"%guilds%'[s] categories[s]\",\n      ],\n      examples: [\n        \"discord command $categories:\",\n        \"\\ttrigger:\",\n        \"\\t\\tset {_categories::*} to the categories of event-guild\",\n        '\\t\\treply with \"Here are the current categories: `%{_categories::*}%`\"',\n      ],\n    },\n    {\n      description: \"Get a Category by its name in a Guild.\",\n      name: \"Category named\",\n      patterns: [\n        \"[the] category (with [the] name|named) %string% [in %guild%]\",\n      ],\n      examples: [\n        \"discord command $create <text>:\",\n        \"\\ttrigger:\",\n        \"\\t\\tcreate text channel:\",\n        \"\\t\\t\\tset the name of the channel to arg-1 \",\n        '\\t\\t\\tset the parent of the channel to category named \"xd\"',\n        \"\\t\\tcreate the last made channel in event-guild and store it in {_chnl}\",\n        \"\\t\\treply with \\\"I've successfully created a channel named `%arg-1%`\",\n        ' ID: %id of {_chnl}%\"',\n      ],\n    },\n    {\n      description: \"Get a Category via it's ID.\",\n      name: \"Category with ID\",\n      patterns: [\"category with id %string% [in %-guild%]\"],\n      examples: ['reply with \"%category with id \"\"4516161651\"\"%\"'],\n    },\n    {\n      description: \"Get or set the owner of a guild.\",\n      name: \"Owner of Guild\",\n      patterns: [\n        \"[the] discord owner[s] of %guilds%\",\n        \"%guilds%'[s] discord owner[s]\",\n      ],\n      examples: [\n        \"discord command $transfer <member>:\",\n        \"\\ttrigger:\",\n        \"\\t\\tset discord owner of event-guild to arg-1 with event-bot\",\n      ],\n    },\n    {\n      description:\n        \"Get the AFK voice channel of a guild. You can set this to another channel.\",\n      name: \"Afk channel of Guild\",\n      patterns: [\n        \"[the] afk channel[s] of %guilds%\",\n        \"%guilds%'[s] afk channel[s]\",\n      ],\n      examples: [\n        \"discord command $afk:\",\n        \"\\ttrigger:\",\n        '\\t\\treply with \"%afk channel of event-guild%\"',\n      ],\n    },\n    {\n      description:\n        \"Get the last set of retrieved bans from a guild. The bot must have enough permissions to retrieve the bans list.\",\n      name: \"Retrieved bans\",\n      patterns: [\"[last] (grabbed|retrieved) bans\"],\n      examples: [\n        \"discord command $bans:\",\n        \"\\ttrigger:\",\n        \"\\t\\tgrab bans of event-guild\",\n        '\\t\\treply with \"Here are the banned users: %grabbed bans%\"',\n      ],\n    },\n    {\n      description: \"Get all of the channels of a guild or category.\",\n      name: \"Channels of\",\n      patterns: [\n        \"[the] channel[s] of %guild/category%\",\n        \"%guild/category%'[s] channel[s]\",\n      ],\n      examples: [\n        \"discord command $channels [<text>]:\",\n        \"\\ttrigger:\",\n        \"\\t\\tif arg-1 is not set:\",\n        '\\t\\t\\treply with \"Here are the current channels: `%channels of event-guild%`\"',\n        \"\\t\\t\\tstop\",\n        \"\\t\\tset {_category} to category named arg-1\",\n        '\\t\\treply with \"Here are the channels of the category named %arg-1%: `%channels of {_category}%`\"',\n      ],\n    },\n    {\n      description: \"Get the creation date of most things in Discord.\",\n      name: \"Discord Creation Date of\",\n      patterns: [\n        \"[the] discord creation date[s] of %channel/guild/message/role/category/emote/attachment%\",\n        \"%channel/guild/message/role/category/emote/attachment%'[s] discord creation date[s]\",\n      ],\n      examples: ['broadcast \"%discord creation date of event-guild%\"'],\n    },\n    {\n      description: \"Get all of the emotes a guild has added.\",\n      name: \"Emotes of guild\",\n      patterns: [\n        \"[the] [<global>] emote[s] of %guild%\",\n        \"%guild%'[s] [<global>] emote[s]\",\n      ],\n      examples: [\n        \"discord command $emotes:\",\n        \"\\texecutable in: guild\",\n        \"\\ttrigger:\",\n        \"\\t\\tloop emotes of event-guild:\",\n        \"\\t\\t\\tif loop-value is animated:\",\n        \"\\t\\t\\t\\tadd loop-value to {_animated::*}\",\n        \"\\t\\t\\telse:\",\n        \"\\t\\t\\t\\tadd loop-value to {_non::*}\",\n        \"\\t\\tcreate embed:\",\n        '\\t\\t\\tset the author info of the embed to author named \"Emotes %reaction \"\":smile:\"\"%\" with no url and no icon',\n        '\\t\\t\\tset the description of the embed to \"%name of event-guild% has %size of {_non::*}% regular emotes and %size of {_animated::*}% animated emotes!!\"',\n        \"\\t\\t\\tset the colour of the embed to Purple\",\n        '\\t\\t\\tadd field named \"Local emotes (1/1)\" with value \"%{_non::*}%\" to embed',\n        '\\t\\t\\tadd field named \"Animated emotes (1/1)\" with value \"%{_animated::*}%\" to embed',\n        \"\\t\\tsend the last created embed to event-channel with event-bot\",\n      ],\n    },\n    {\n      description: \"Get a guild's icon url.\",\n      name: \"Icon URL of Guild\",\n      patterns: [\"[the] icon[s] of %guilds%\", \"%guilds%'[s] icon[s]\"],\n      examples: ['reply with \"%icon of event-guild%\"'],\n    },\n    {\n      description:\n        \"Get the last invite created by vixio, can specify the specific channel if you want.\",\n      name: \"Last Created Invitation\",\n      patterns: [\"[the] last created invite [for %-channel%]\"],\n      examples: [\n        \"discord command invite:\",\n        \"\\ttrigger:\",\n        \"\\t\\tcreate an invite to event-channel\",\n        '\\t\\treply with \"%the last created invite%\"',\n      ],\n    },\n    {\n      description: \"Get all of the Member from a variety of different types.\",\n      name: \"Members of\",\n      patterns: [\n        \"[the] discord member[s] of %guild/category/channel%\",\n        \"%guild/category/channel%'[s] discord member[s]\",\n      ],\n      examples: [\n        \"discord command $guild:\",\n        \"\\ttrigger:\",\n        '\\t\\treply with \"%size of discord members of event-guild%\"',\n      ],\n    },\n    {\n      description: \"Get the public role in a guild. This is the everyone role.\",\n      name: \"Public Role of Guild\",\n      patterns: [\n        \"[the] public role[s] of %guild%\",\n        \"%guild%'[s] public role[s]\",\n      ],\n      examples: [\n        \"discord command role:\",\n        \"\\ttrigger:\",\n        '\\t\\treply with \"`%public role of event-guild%`\"',\n      ],\n    },\n    {\n      description: \"Get a role via it's name in a guild.\",\n      name: \"Role Named\",\n      patterns: [\n        \"[the] role[<s>] (with [the] name|named) %string% [in %guild%]\",\n      ],\n      examples: [\n        \"discord command $role <text>:\",\n        \"\\ttrigger:\",\n        \"\\t\\tset {_role} to role named arg-1\",\n        \"\\t\\tif {_role} is not set:\",\n        '\\t\\t\\treply with \"Could not find a role by that name!\"',\n        \"\\t\\t\\tstop\",\n        '\\t\\treply with \"I found the role! ID: %id of {_role}%\"',\n      ],\n    },\n    {\n      description: \"Get all of the roles a guild has.\",\n      name: \"Roles of Guild\",\n      patterns: [\"[the] role[s] of %guild%\", \"%guild%'[s] role[s]\"],\n      examples: [\n        \"discord command $roles:\",\n        \"\\ttrigger:\",\n        '\\t\\treply with \"Here are the current roles: `%roles of event-guild%`\"',\n      ],\n    },\n    {\n      description: \"Get all of the text channels in a guild or a category.\",\n      name: \"Text Channels of\",\n      patterns: [\n        \"[the] text(-| )channel[s] of %guild/category%\",\n        \"%guild/category%'[s] text(-| )channel[s]\",\n      ],\n      examples: [\n        \"discord command $channels [<text>]:\",\n        \"\\ttrigger:\",\n        \"\\t\\tif arg-1 is not set:\",\n        '\\t\\t\\treply with \"Here are the current channels: `%channels of event-guild%`\"',\n        \"\\t\\t\\tstop\",\n        \"\\t\\tset {_category} to category named arg-1\",\n        '\\t\\treply with \"Here are the channels of the category named %arg-1%: `%channels of {_category}%`\"',\n      ],\n    },\n    {\n      description:\n        \"Get a Guild's verification level. This can be reset and set.\",\n      name: \"Discord Verification level of Guild\",\n      patterns: [\n        \"[the] discord verification level[s] of %guilds%\",\n        \"%guilds%'[s] discord verification level[s]\",\n      ],\n      examples: ['broadcast \"%discord verification level of event-guild%\"'],\n    },\n    {\n      description: \"Get all of the voice channels of a guild or category.\",\n      name: \"Voice Channels\",\n      patterns: [\n        \"[the] voice[(-| )]channels of %guild/category%\",\n        \"%guild/category%'[s] voice[(-| )]channels\",\n      ],\n      examples: [\n        \"on guild message receive:\",\n        \"\\tset {_channels::*} to voice channels of event-guild\",\n        \"\\tloop {_channels::*}:\",\n        '\\t\\tbroadcast \"%name of loop-value%\"',\n      ],\n    },\n    {\n      description: \"Get the channel an invite was created for.\",\n      name: \"Channel of\",\n      patterns: [\n        \"[the] [discord] channel[s] of %invite%\",\n        \"%invite%'[s] [discord] channel[s]\",\n      ],\n      examples: [\n        \"discord command parse <text>:\",\n        \"\\tprefixes: /\",\n        \"\\ttrigger:\",\n        \"\\t\\tretrieve the invites of event-guild \",\n        \"\\t\\tset {in::*} to last grabbed invites\",\n        \"\\t\\tloop {in::*}:\",\n        '\\t\\t\\tif \"%loop-value%\" contains arg-1:',\n        \"\\t\\t\\t\\tset {_} to loop-value\",\n        \"\\t\\tmake embed and send it to event-channel:\",\n        '\\t\\t\\tset the title of the embed to title with text \"Parsing results for invite: %invite url of {_}%\"',\n        \"\\t\\t\\tset the colour of the embed to Cyan \",\n        '\\t\\t\\tset the thumbnail of embed to \"https://cdn.discordapp.com/icons/236641445363056651/e51b2c2f4d539f7c18ae966d60992d25.png\"',\n        '\\t\\t\\tadd field named \"Max Uses\" with value \"%max uses of {_}%\" to embed ',\n        '\\t\\t\\tadd field named \"Max Age (In Seconds)\" with value \"%max age of {_}%\" to embed',\n        '\\t\\t\\tadd field named \"Time Created\" with value \"%creation date of {_}%\" to embed',\n        '\\t\\t\\tadd field named \"Guild\" with value \"%guild of {_}%\" to embed',\n        '\\t\\t\\tadd field named \"Channel\" with value \"%channel of {_}%\" to embed',\n      ],\n    },\n    {\n      description:\n        \"If it isn't inside an invite creation scope, this expression returns a new invite. If it is inside an invite creation scope, it returns the invite that belongs to that scope.\",\n      name: \"New/Current Invite\",\n      patterns: [\"[(the|an|[a] new)] invite\"],\n      examples: [\n        \"discord command rawr:\",\n        \"\\tprefixes: /\",\n        \"\\ttrigger:\",\n        \"\\t\\tcreate invite to event-channel with event-bot:\",\n        \"\\t\\t\\tset max uses of the invite to 5\",\n        \"\\t\\t\\tset {_} to the invite\",\n        '\\t\\treply with \"%creation date of of {_}%\"',\n      ],\n    },\n    {\n      description:\n        \"Set how long an invite that is being created in the invite creation scope should last. (In seconds).This defaults to 86400 seconds (24 Hours.). Set it to 0 if you want it to never expire. This number cannot be negative\",\n      name: \"Max Age\",\n      patterns: [\"[the] max age[s] of %invite%\", \"%invite%'[s] max age[s]\"],\n      examples: [\n        \"discord command invite:\",\n        \"\\tprefixes: /\",\n        \"\\ttrigger:\",\n        \"\\t\\tcreate invite to event-channel:\",\n        \"\\t\\t\\tset the max usage of the invite to 1\",\n        \"\\t\\t\\tset the max age of the invite to 36\",\n        \"\\t\\t\\tset {_} to the invite\",\n        '\\t\\treply with \"%max age of {_}%\"',\n      ],\n    },\n    {\n      description:\n        \"Get either how many times an invite can be used, or set how many times an invite can be used inside the invite creation scope.\",\n      name: \"Invite Max Usage\",\n      patterns: [\n        \"[the] max (use[s]|usage)[s] of %invite%\",\n        \"%invite%'[s] max (use[s]|usage)[s]\",\n      ],\n      examples: [\n        \"discord command rawr:\",\n        \"\\tprefixes: /\",\n        \"\\ttrigger:\",\n        \"\\t\\tcreate invite to event-channel with event-bot:\",\n        \"\\t\\t\\tset max uses of the invite to 5\",\n        \"\\t\\t\\tset {_} to the invite\",\n        '\\t\\treply with \"%max uses of {_}%\"',\n      ],\n    },\n    {\n      description: \"Get the time a discord invite was created.\",\n      name: \"Creation date of Invite\",\n      patterns: [\n        \"[the] [invite] creation date[s] of %invite%\",\n        \"%invite%'[s] [invite] creation date[s]\",\n      ],\n      examples: [\n        \"discord command rawr:\",\n        \"\\tprefixes: /\",\n        \"\\ttrigger:\",\n        \"\\t\\tcreate invite to event-channel with event-bot:\",\n        \"\\t\\t\\tset max uses of the invite to 5\",\n        \"\\t\\t\\tset {_} to the invite\",\n        '\\t\\treply with \"%creation date of of {_}%\"',\n      ],\n    },\n    {\n      description: \"Get the Url of a Discord invite.\",\n      name: \"Invite Url of\",\n      patterns: [\n        \"[the] invite url[s] of %invite%\",\n        \"%invite%'[s] invite url[s]\",\n      ],\n      examples: [\n        \"discord command invite:\",\n        \"\\tprefixes: /\",\n        \"\\ttrigger:\",\n        \"\\t\\tcreate invite to event-channel:\",\n        \"\\t\\t\\tset the max usage of the invite to 1\",\n        \"\\t\\t\\tset {_} to the invite\",\n        '\\t\\treply with \"Done! Created: %invite url of {_}%\"',\n      ],\n    },\n    {\n      description: \"Get the invites the retrieve invites effect retrieved.\",\n      name: \"Retrieved Invites\",\n      patterns: [\"[the] last (grabbed|retrieved) invites\"],\n      examples: [\n        \"discord command test:\",\n        \"\\tprefixes: /\",\n        \"\\ttrigger:\",\n        \"\\t\\tretrieve the invites of event-guild\",\n        '\\t\\treply with \"%last grabbed invites%\"',\n      ],\n    },\n    {\n      description: \"Get the color of a role. This can be set to any color.\",\n      name: \"Color of Role\",\n      patterns: [\"[the] colo[u]r[s] of %roles%\", \"%roles%'[s] colo[u]r[s]\"],\n      examples: [\"set the color of {_role} to red with event-bot\"],\n    },\n    {\n      description: \"Get the label from a button interaction.\",\n      name: \"Button Label\",\n      patterns: [\"[the] button [interaction] label\"],\n      examples: [\"button label\"],\n    },\n    {\n      description: \"Get the content of a slash command option.\",\n      name: \"Slash Command Option\",\n      patterns: [\"[the] [slash] [command] option [with id] %string%\"],\n      examples: ['slash command option \"name\"'],\n    },\n    {\n      description: \"Get the selected options on the select interaction event.\",\n      name: \"Selected options.\",\n      patterns: [\"[the] selection[s]\"],\n      examples: [\"SOON\"],\n    },\n    {\n      description:\n        \"Get the deafened state of a member in a guild. If they are deafened by someone then this returns true. This will not be updated unless a user is in a voice channel when they are deafened.\",\n      name: \"Guild Deafened State of Member\",\n      patterns: [\n        \"[the] [<guild>] deafen[ed] state[s] of %members%\",\n        \"%members%'[s] [<guild>] deafen[ed] state[s]\",\n      ],\n      examples: [\n        \"on guild message receive:\",\n        '\\treply with \"%deafen state of event-user in event-guild%\"',\n      ],\n    },\n    {\n      description:\n        \"Get the date a member joined a guild. If you append discord then it gets the date they joined discord, otherwise its the date they joined the guild if the input is a member and the discord join date for users.\",\n      name: \"Join Date\",\n      patterns: [\n        \"[the] [<discord>] join date[s] of %members/users%\",\n        \"%members/users%'[s] [<discord>] join date[s]\",\n      ],\n      examples: ['reply with \"%discord join date of event-user%\"'],\n    },\n    {\n      description:\n        \"Gets a member's nickname (guild sensitive name). You can set this expression.\",\n      name: \"Nickname of\",\n      patterns: [\n        \"[the] discord nickname[s] of %members%\",\n        \"%members%'[s] discord nickname[s]\",\n      ],\n      examples: [\n        'set the discord nickname of event-member to \"new nickname\" with event-bot',\n      ],\n    },\n    {\n      description:\n        \"Get the online status of a user or a member. The online status can be set or reset for a bot.\",\n      name: \"Online status of\",\n      patterns: [\n        \"[the] [online][(-| )]status[s] of %members/users/bots/strings%\",\n        \"%members/users/bots/strings%'[s] [online][(-| )]status[s]\",\n      ],\n      examples: [\"set status of event-bot to do not disturb\"],\n    },\n    {\n      description:\n        \"Get the roles that a member has in a guild. You can remove, add and set the roles.\",\n      name: \"Roles of Member\",\n      patterns: [\"[the] role[s] of %members%\", \"%members%'[s] role[s]\"],\n      examples: [\n        'remove role with id \"6110981981981\" from roles of event-member',\n      ],\n    },\n    {\n      description: \"Get the voice channel a member is in if they are in one.\",\n      name: \"Voice Channel of Member\",\n      patterns: [\n        \"[the] [current] voice[(-| )]channel of %members%\",\n        \"%members%'[s] [current] voice[(-| )]channel\",\n      ],\n      examples: [\"join voice channel of event-member\"],\n    },\n    {\n      description: \"Get the attachments of a message.\",\n      name: \"Attachments of\",\n      patterns: [\n        \"[the] attachment[s] of %message%\",\n        \"%message%'[s] attachment[s]\",\n      ],\n      examples: ['broadcast \"%discord name of attachment of event-message%\"'],\n    },\n    {\n      description: \"Get the height of an attachment\",\n      name: \"Attachment Height of\",\n      patterns: [\n        \"[the] attachment height[s] of %attachment%\",\n        \"%attachment%'[s] attachment height[s]\",\n      ],\n      examples: ['broadcast \"%height of attachment of event-message%\"'],\n    },\n    {\n      description: \"Get the URL of a message attachment.\",\n      name: \"Attachment Url of\",\n      patterns: [\n        \"[the] attachment url[s] of %attachment%\",\n        \"%attachment%'[s] attachment url[s]\",\n      ],\n      examples: ['broadcast \"%attachment url of attachment of event-message%\"'],\n    },\n    {\n      description: \"Get the width of an attachment\",\n      name: \"Attachment Width of\",\n      patterns: [\n        \"[the] attachment width[s] of %attachment%\",\n        \"%attachment%'[s] attachment width[s]\",\n      ],\n      examples: [\n        \"on guild message received:\",\n        \"\\tset {_} to attachment of event-message\",\n        \"\\tif {_} is set:\",\n        \"\\t\\tif {_} is an image:\",\n        '\\t\\t\\treply with \"its %attachment width of {_}% by %attachment height of {_}%\"',\n      ],\n    },\n    {\n      description:\n        \"Get the Embed of a Message Builder. You can set, delete and reset the embed.\",\n      name: \"Embed of Message Builder\",\n      patterns: [\n        \"[the] embed[s] of %messagebuilders%\",\n        \"%messagebuilders%'[s] embed[s]\",\n      ],\n      examples: [\n        \"discord command $build:\",\n        \"\\ttrigger:\",\n        \"\\t\\tmake embed:\",\n        '\\t\\t\\tadd field with value \"Hey there this is an embed!\" to the embed',\n        \"\\t\\t\\tset color of the embed to red\",\n        \"\\t\\tset {e} to a new message builder\",\n        '\\t\\tset text of {e} to \"Hey there%nl%\"',\n        \"\\t\\tset embed of {e} to last embed\",\n        '\\t\\tappend \"Info for embed attached to this builder: %color of embed of {e}%\" to {e}',\n        \"\\t\\tsend {e} to event-channel with event-bot\\t\",\n      ],\n    },\n    {\n      description:\n        \"Get the text inside of a message builder. Can be either set, reset, or deleted.\",\n      name: \"Text of a message builder\",\n      patterns: [\n        \"[the] [<stripped>] text[s] of %messagebuilders%\",\n        \"%messagebuilders%'[s] [<stripped>] text[s]\",\n      ],\n      examples: [\n        \"command /build:\",\n        \"\\ttrigger:\",\n        \"\\t\\tset {e} to a new message builder\",\n        '\\t\\tset text of {e} to \"Hey look at this\"',\n        '\\t\\tbroadcast \"%text of {e}%\"',\n      ],\n    },\n    {\n      description: \"Create a new MessageBuilder\",\n      name: \"Message Builder\",\n      patterns: [\"a [new] message builder\"],\n      examples: [\"set {e} to a new message builder\"],\n    },\n    {\n      description:\n        \"Get the TTS state of a Message Builder. The state can be set to true or false.\",\n      name: \"TTS of Message Builder\",\n      patterns: [\n        \"[the] tts state[s] of %messagebuilders%\",\n        \"%messagebuilders%'[s] tts state[s]\",\n      ],\n      examples: [\n        \"discord command $tts:\",\n        \"\\ttrigger:\",\n        \"\\t\\tset {_} to a new message builder\",\n        \"\\t\\tset tts state of {_} to true\",\n        \"\\t\\tsend {_} to event-channel with event-bot\",\n        '\\t\\treply with \"done?\"',\n      ],\n    },\n    {\n      description:\n        \"Get the reactions of a message. Can be deleted, reset, removed and added to.\",\n      name: \"Reactions of Message\",\n      patterns: [\n        \"[the] reactions[s] of %messages%\",\n        \"%messages%'[s] reactions[s]\",\n      ],\n      examples: [\n        \"on guild message receive:\",\n        '\\tadd reactions \"smile\" and \"frowning\" to reactions of event-message',\n      ],\n    },\n    {\n      description: \"Get the author of a message\",\n      name: \"Author of Message\",\n      patterns: [\n        \"[the] [discord] author[s] of %messages%\",\n        \"%messages%'[s] [discord] author[s]\",\n      ],\n      examples: [\"author of event-message\"],\n    },\n    {\n      description:\n        \"Get the content of a Message. The content can be set and deleted.\",\n      name: \"Content of Message\",\n      patterns: [\n        \"[the] [<stripped|display(able)?>] content[s] of %messages%\",\n        \"%messages%'[s] [<stripped|display(able)?>] content[s]\",\n      ],\n      examples: [\"content of event-message\"],\n    },\n    {\n      description: \"Get the direct jump url to a message.\",\n      name: \"Jump URL of Message\",\n      patterns: [\"[the] jump url[s] of %message%\", \"%message%'[s] jump url[s]\"],\n      examples: [\"\"],\n    },\n    {\n      description:\n        \"Get the last retrieved message called from the retrieve message effect. Cleared every time the retrieve message effect is used.\",\n      name: \"Last retrieved Message\",\n      patterns: [\"last retrieved [discord] message\"],\n      examples: [\"set {_message} to last retrieved message\"],\n    },\n    {\n      description: \"Get the mentioned Channels in a Message\",\n      name: \"Mentioned Channels\",\n      patterns: [\n        \"[the] mentioned channel[s] of %messages%\",\n        \"%messages%'[s] mentioned channel[s]\",\n      ],\n      examples: [\"set {_var::*} to event-message's mentioned channels\"],\n    },\n    {\n      description: \"Get the mentioned Roles in a Message\",\n      name: \"Mentioned Roles\",\n      patterns: [\n        \"[the] mentioned role[s] of %messages%\",\n        \"%messages%'[s] mentioned role[s]\",\n      ],\n      examples: [\"set {_var::*} to event-message's mentioned roles\"],\n    },\n    {\n      description: \"Get the mentioned Users in a Message\",\n      name: \"Mentioned Users\",\n      patterns: [\n        \"[the] mentioned user[s] of %messages%\",\n        \"%messages%'[s] mentioned user[s]\",\n      ],\n      examples: [\"set {_var::*} to event-message's mentioned users\"],\n    },\n    {\n      description: \"Get the message that was replied to.\",\n      name: \"Message Reference of Message\",\n      patterns: [\n        \"[the] message reference[s] of %message%\",\n        \"%message%'[s] message reference[s]\",\n      ],\n      examples: [\n        \"discord command $rmsg <text>:\",\n        \"\\ttrigger:\",\n        \"\\t\\tset {_msg} to message reference of event-message\",\n        '\\t\\treply with \"%content of {_msg}%\"',\n      ],\n    },\n    {\n      description:\n        \"Returns the timestamp of either a message or an embed. You can set the time of an embed to any date (e.g. now).\",\n      name: \"Timestamp of\",\n      patterns: [\n        \"[the] (timestamp|date)[s] of %embedbuilders/messages%\",\n        \"%embedbuilders/messages%'[s] (timestamp|date)[s]\",\n      ],\n      examples: [\n        \"set the timestamp of {_embed} to now\",\n        \"\",\n        \"# You can also set it to a date in the past/future like this\",\n        \"\",\n        \"set {_thePast} to now\",\n        \"subtract 5 days from {_thePast}\",\n        \"set the timestamp of {_embed} to {_thePast}\",\n      ],\n    },\n    {\n      description: \"Grabs a channel by its ID\",\n      name: \"Channel with ID\",\n      patterns: [\"channel with id %string% [in %-guild%]\"],\n      examples: ['broadcast \"%name of channel with id \"\"6515615645451561\"\"%'],\n    },\n    {\n      description:\n        \"Get a Voice channel by it's ID, can include the Guild it is in for faster results.\",\n      name: \"Voice Channel with ID\",\n      patterns: [\"voice(-| )channel with id %string% [in %-guild%]\"],\n      examples: [\n        \"discord command topic <string> <string>:\",\n        \"\\tusage: topic <channel id> <new topic>\",\n        \"\\tprefixes: $\",\n        \"\\ttrigger:\",\n        \"\\t\\tset name of voice channel with id arg-1 to arg-2 with event-bot\",\n      ],\n    },\n    {\n      description:\n        \"Get all the guilds with a certain name that vixio can find.\",\n      name: \"Guild  Named\",\n      patterns: [\"guild[s] named %string%\"],\n      examples: ['set {_var::*} to guilds named \"Vixio\"'],\n    },\n    {\n      description: \"Get a Guild via it's ID\",\n      name: \"Guild with ID\",\n      patterns: [\"(server|guild) with id %string%\"],\n      examples: ['broadcast name of guild with id \"16165192162168461\"'],\n    },\n    {\n      description: \"Returns the member form of a user in the specified guild\",\n      name: \"User in Guild\",\n      patterns: [\"%user% in %guild%\"],\n      examples: [\n        'broadcast nickname of user with id \"1561515615610515\" in event-guild',\n      ],\n    },\n    {\n      description:\n        \"Get a Role via it's ID. You may get the id of a role by either making the role mentionable and typing @rolename or by looping the roles of the guild and finding it by name. You could also use the `role named` syntax to retrieve the role outright.\",\n      name: \"Role with ID\",\n      patterns: [\"role with id %string% [in %-guild%]\"],\n      examples: [\n        'add role with id \"5151561851\" to roles of event-user in event-guild',\n      ],\n    },\n    {\n      description: \"Get a User via their ID.\",\n      name: \"User with ID\",\n      patterns: [\"user with id %string%\"],\n      examples: ['broadcast name of user with id \"456145141891891\"'],\n    },\n    {\n      description:\n        \"Tell if a role can be publicly mentioned, can be set to true or false\",\n      name: \"Mentionable State of Role\",\n      patterns: [\n        \"[the] mentionable state[s] of %roles%\",\n        \"%roles%'[s] mentionable state[s]\",\n      ],\n      examples: [\n        'reply with \"%mentionable state of role with id \"\"55416516516516\"\"%',\n      ],\n    },\n    {\n      description: \"Get the duration of a track. This is how long it is.\",\n      name: \"Duration of Track\",\n      patterns: [\"[the] duration[s] of %tracks%\", \"%tracks%'[s] duration[s]\"],\n      examples: ['broadcast \"%duration of track event-bot is playing%\"'],\n    },\n    {\n      description:\n        \"Get a track's identifier, this is the unique ID given to it by the hosting site.\",\n      name: \"Identifier of Track\",\n      patterns: [\n        \"[the] identifier[s] of %tracks%\",\n        \"%tracks%'[s] identifier[s]\",\n      ],\n      examples: ['broadcast \"%identifier of track event-bot is playing%\"'],\n    },\n    {\n      description:\n        \"Get the last track a bot has loaded. This does not mean the track the bot is playing.\",\n      name: \"Last Loaded Audio Track\",\n      patterns: [\n        \"[the] last loaded [audio] track [of %bot/string%] [in %guild%]\",\n      ],\n      examples: ['reply with \"%the last loaded track%\"'],\n    },\n    {\n      description:\n        \"Get the position a track is at. This is the current play time the track is at.\",\n      name: \"Position of Track\",\n      patterns: [\"[the] position[s] of %tracks%\", \"%tracks%'[s] position[s]\"],\n      examples: ['broadcast \"%position of track event-bot is playing%\"'],\n    },\n    {\n      description: \"Get a track's author. This is the creator of the source.\",\n      name: \"Author of Track\",\n      patterns: [\"[the] author[s] of %tracks%\", \"%tracks%'[s] author[s]\"],\n      examples: ['broadcast \"%author of track event-bot is playing%\"'],\n    },\n    {\n      description: \"Get a track's url.\",\n      name: \"Url of Track\",\n      patterns: [\"[the] ur(i|l)[s] of %tracks%\", \"%tracks%'[s] ur(i|l)[s]\"],\n      examples: ['broadcast \"%url of track event-bot is playing%\"'],\n    },\n    {\n      description:\n        \"Get either the user's custom avatar or their default one that discord gave them. You can extract the id from the url using the ID expression.\",\n      name: \"Avatar of User\",\n      patterns: [\n        \"[the] [discord] [<default>] avatar[s] of %users/bots/strings/member%\",\n        \"%users/bots/strings/member%'[s] [discord] [<default>] avatar[s]\",\n      ],\n      examples: [\n        \"discord command $info <user>:\",\n        \"\\ttrigger:\",\n        '\\t\\treply with \"%avatar of arg-1%\"',\n      ],\n    },\n    {\n      description: \"Check if a user is a bot or not.\",\n      name: \"Bot State Of User\",\n      patterns: [\"[the] bot state[s] of %users%\", \"%users%'[s] bot state[s]\"],\n      examples: [\"set {var} to bot state of event-user\"],\n    },\n    {\n      description:\n        \"Get the discriminator of a user, this is the four numbers after a users name.\",\n      name: \"Discriminator of User\",\n      patterns: [\n        \"[the] discriminator[s] of %users%\",\n        \"%users%'[s] discriminator[s]\",\n      ],\n      examples: [\n        \"discord command $info <user>:\",\n        \"\\ttrigger:\",\n        '\\t\\treply with \"%discriminator of arg-1%\"',\n      ],\n    },\n    {\n      description:\n        \"Get the game of a user. You may use this to set a bots game, this will set it as Playing: <whatever you input>. Use the mark as gametype effect to use the other types.\",\n      name: \"Game of User\",\n      patterns: [\n        \"[the] game[s] of %members/users/bots/strings%\",\n        \"%members/users/bots/strings%'[s] game[s]\",\n      ],\n      examples: [\n        \"discord command $info <user>:\",\n        \"\\ttrigger:\",\n        '\\t\\treply with \"%game of arg-1%\"',\n      ],\n    },\n    {\n      description: \"Get a newline, which means skips to a new line\",\n      name: \"New Line\",\n      patterns: [\"([a] new line|nl)\"],\n      examples: [\n        \"discord command $nl:\",\n        \"\\ttrigger:\",\n        \"\\t\\tset {_m} to a message builder\",\n        '\\t\\tappend \"Hey!\" to {_m}',\n        '\\t\\tappend \"%nl%\" to {_m}',\n        '\\t\\tappend \"There!\" to {_m}',\n        \"\\t\\treply with {_m}\",\n      ],\n    },\n    {\n      description: \"Get a zero width space\",\n      name: \"Zero width space\",\n      patterns: [\"[a] zero width space\"],\n      examples: [\"append zero width space to {_messageBuilder}\"],\n    },\n  ],\n};\n","<style>\n\t:global(body.dark-mode) .navbar-menu, :global(body.dark-mode) .navbar-brand {\n\t\tbackground-color: #161b22;\n\t}\n    :global(body.dark-mode) .navbar-item, :global(body.dark-mode) .navbar-burger {\n        color: white !important;\n    }\n    :global(body.dark-mode) a.navbar-item:focus, :global(body.dark-mode) a.navbar-item:focus-within, :global(body.dark-mode) a.navbar-item:hover {\n        background-color: #0d1117;\n    }\n</style>\n\n<script>\n    let active = false;\n</script>\n\n<nav class=\"navbar\">\n    <div class=\"navbar-brand\">\n        <a class=\"navbar-burger\" href=\"#!\" on:click|preventDefault={() => active = !active}>\n            <span></span>\n            <span></span>\n            <span></span>\n        </a>\n    </div>\n    <div class=\"navbar-menu\" class:is-active={active}>\n        <div class=\"navbar-start\">\n            <a class=\"navbar-item\" href=\"#!\" onclick=\"toggleTheme();\">\n                <span><i class=\"fas fa-moon\"></i></span>\n            </a>\n\n            <a class=\"navbar-item\" target=\"_blank\" href=\"https://github.com/1A3Dev/Vixio/releases\">\n                <span><i class=\"fab fa-github\"></i></span>\n                <span style=\"margin-left: 5px;\">Releases</span>\n            </a>\n\n            <a class=\"navbar-item\" target=\"_blank\" href=\"https://discord.gg/kNHmqYH\">\n                <span><i class=\"fab fa-discord\"></i></span>\n                <span style=\"margin-left: 5px;\">Discord</span>\n            </a>\n\n            <a class=\"navbar-item\" target=\"_blank\" href=\"https://github.com/1A3Dev/Vixio/wiki\">\n                <span><i class=\"fas fa-book\"></i></span>\n                <span style=\"margin-left: 5px;\">Wikipedia</span>\n            </a>\n        </div>\n    </div>\n</nav>\n","<style>\n\t:global(body.dark-mode) .menu-list a {\n\t\tcolor: white;\n\t}\n    :global(body.dark-mode) .menu-list a:hover {\n        background-color: #161b22 !important;\n    }\n</style>\n\n<aside class=\"menu\">\n    <p class=\"menu-label\">Search in</p>\n    <ul class=\"menu-list\">\n        <li><a href=\"#events\">Events</a></li>\n        <li><a href=\"#conditions\">Conditions</a></li>\n        <li><a href=\"#effects\">Effects</a></li>\n        <li><a href=\"#expressions\">Expressions</a></li>\n    </ul>\n</aside>","<style>\n\t:global(body.dark-mode) .card {\n\t\tbackground-color: #161b22;\n\t}\n    :global(body.dark-mode) .card-header-title, :global(body.dark-mode) .label, :global(body.dark-mode) .content {\n        color: white;\n    }\n</style>\n\n<script>\n\n    export let type;\n    export let syntax;\n\n    const id = syntax.name.toLowerCase().replace(/\\s/g, '_');\n\n    async function copyLink(elementId) {\n        window.location.href = window.location.href.replace(/#\\w+$/g, '') + `#${elementId}`;\n        const dummy = document.createElement('input'),\n              text = window.location.href;\n        document.body.appendChild(dummy);\n        dummy.value = text;\n        dummy.select();\n        document.execCommand('copy');\n        document.body.removeChild(dummy);\n    }\n\n</script>\n\n<div class=\"card top\" {id}>\n    <header class=\"card-header\">\n        <span class=\"tag is-large\" style=\"background-color: rgb(97, 237, 120)\">{type.toUpperCase()}</span>\n        <p class=\"card-header-title\">{syntax.name}</p>\n        <a aria-label=\"more options\" class=\"card-header-icon\" href=\"#!\" on:click|preventDefault={() => copyLink(id)}>\n            <span>Copy Link</span>\n            <span class=\"icon\"><i class=\"fas fa-hashtag\"></i></span>\n        </a>\n    </header>\n    <div class=\"card-content\">\n        <div class=\"content\">\n            <label class=\"label\" for=\"card_desc\">Description:</label>\n            <div class=\"content\">{syntax.description}</div>\n\n            <label class=\"label\" for=\"card_patterns\">Patterns:</label>\n            <pre class=\"card-pattern\">{@html\nsyntax.patterns\n    .join('<br>')\n    .replace(/\\b(seen|from|of|in|reply with|append|set|add|remove)\\b/gmui, '<span style=\"color: rgb(69, 134, 239)\">$&</span>')\n    .replace(/\\b(bot|guild|user|member|role|channel|permission|emote|embed)(builder)?s?\\b/gmui, '<span style=\"color: rgb(61, 226, 75)\">$&</span>')\n}</pre>\n\n            <label class=\"label\" for=\"card_examples\">Example:</label>\n            <pre class=\"card-example\">{@html\nsyntax.examples\n    .join('<br>')\n    .split('\\\\t')\n    .join('&nbsp;')\n    .replace(/\\t(prefixes|aliases|roles|description|usage|bots|executable in|trigger):/gmui, '<span style=\"color: rgb(244, 182, 66)\">$&</span>')\n    .replace(/\\s\".+\"/gmui, '<span style=\"color: rgb(194, 66, 244)\">$&</span>')\n    .replace(/(discord )?command/gmui, '<span style=\"color: rgb(244, 182, 66)\">$&</span>')\n    .replace(/\\{@.+\\}/gmui, '<span style=\"color: rgb(224, 38, 38)\">$&</span>')\n    .replace(/\\b(seen|from|in|reply with|append|set|add|remove|if|is|make)(?!:)\\b/gmui, '<span style=\"color: rgb(69, 134, 239)\">$&</span>')\n}</pre>\n\n            {#if syntax.eventvalues && syntax.eventvalues.length > 0}\n                <label class=\"label\" for=\"card_values\">Event Values:</label>\n                <pre class=\"card-pattern\">{@html syntax.eventvalues.join('<br>') }</pre>\n            {/if}\n        </div>\n    </div>\n</div>","<script>\n\n    import { onMount } from 'svelte';\n\n    let visible = false;\n\n    function scrollFunction() {\n        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {\n            visible = true;\n        } else {\n            visible = false;\n        }\n    }\n\n    async function backTop() {\n        document.body.scrollTop = 0;\n        document.documentElement.scrollTop = 0;\n    }\n    \n    onMount(async () => {\n        window.onscroll = scrollFunction;\n    })\n\n</script>\n\n<style>\n    .topButton {\n        position: fixed;\n        bottom: 20px;\n        right: 30px;\n        z-index: 99;\n        font-size: 18px;\n        border: none;\n        background-color: #4aabd9;\n        color: white;\n        cursor: pointer;\n        padding: 12px 15px 12px 15px;\n        border-radius: 4px;\n    }\n</style>\n\n{#if visible}\n    <button class=\"topButton\" on:click={backTop}><i class=\"fas fa-chevron-up\"></i></button>\n{/if}","<style>\n\t:global(body.dark-mode) .footer {\n\t\tbackground-color: #161b22;\n        padding: 2rem 1.5rem 2rem;\n\t}\n    :global(body.dark-mode) .content {\n        color: white;\n    }\n</style>\n\n<footer class=\"footer\">\n    <div class=\"content has-text-centered\">\n       <p>Made with ❤️ (by <a href=\"https://github.com/Olyno\">Olyno</a>)</p>\n    </div>\n</footer>","<style>\n\t:global(html.dark-mode) {\n\t\tbackground-color: #0d1117;\n\t}\n\t:global(body.dark-mode) .title {\n\t\tcolor: white !important;\n\t}\n\t.search-input {\n\t\tbackground-color: transparent;\n\t}\n\t:global(body.dark-mode) .search-input {\n\t\tcolor: white;\n\t}\n\t.search-input::placeholder {\n\t\tcolor: grey;\n\t}\n\n\t:global(::-webkit-scrollbar) {\n\t\twidth: 10px;\n\t}\n\n\t:global(::-webkit-scrollbar-thumb) {\n\t\tborder-radius: 20px;\n\t\tbackground-color: rgb(59, 59, 59);\n\t}\n\n\t:global(::-webkit-scrollbar-track) {\n\t\tbackground-color: rgb(30, 30, 30);\n\t}\n</style>\n\n<script>\n\n\timport { onMount } from 'svelte';\n\timport syntaxes from './Syntaxes.js';\n\n\timport Navbar from './components/Navbar.svelte';\n\timport Sidebar from './components/Sidebar.svelte';\n\timport Card from './components/Card.svelte';\n\timport TopArrow from './components/TopArrow.svelte';\n\timport Footer from './components/Footer.svelte';\n\n\tasync function search() {\n\t\tconst cards = document.getElementsByClassName('syntaxes')[0].getElementsByClassName('card')\n\t\tconst search_value = document.getElementsByClassName('search-input')[0].value.toLowerCase();\n\t\tfor (let i = 0; i < cards.length; i++) {\n\t\t\tconst title = cards[i].getElementsByClassName('card-header-title')[0].textContent;\n\t\t\tconst pattern = cards[i].getElementsByClassName('card-pattern')[0].textContent;\n\t\t\tif (title.toLowerCase().includes(search_value) || pattern.toLowerCase().includes(search_value)) {\n\t\t\t\tcards[i].style.display = '';\n\t\t\t} else {\n\t\t\t\tcards[i].style.display = 'none';\n\t\t\t}\n\t\t}\n\t}\n\n\tonMount(async () => {\n        const urlParams = new URLSearchParams(window.location.search);\n        if (urlParams.get(\"query\")) {\n            document.getElementsByClassName('search-input')[0].value = urlParams.get(\"query\");\n            search();\n        }\n\n\t\tconst match = window.location.href.match(/(\\#.+)$/gm);\n\t\tif (match) {\n\t\t\tlet element = document.getElementById( match[0].replace(/^\\#/gm, '') );\n            setTimeout(async() => {\n\t\t\t    element.scrollIntoView();\n            }, 1000)\n\t\t}\n\t})\n\n</script>\n\n<Navbar />\n\n<TopArrow />\n\n<div class=\"container top\">\n\t<div class=\"columns\">\n\t\t<div class=\"column is-2 is-hidden-mobile\">\n\t\t\t<Sidebar />\n\t\t</div>\n\t\t<div class=\"column is-10\">\n\t\t\t<div class=\"has-text-centered\">\n\t\t\t\t<input class=\"input has-text-centered search-input\" on:input={search} type=\"text\" placeholder=\"Find a syntax\">\n\t\t\t\t<br><br>\n\t\t\t</div>\n\t\t\t<div class=\"syntaxes top\">\n\n\t\t\t\t{#each Object.keys(syntaxes) as syntaxType}\n\t\t\t\t\t<div id=\"{syntaxType.toLowerCase()}\"><a href=\"#{syntaxType.toLowerCase()}\" class=\"title\">{syntaxType}</a></div><br>\n\t\t\t\t\t{#each syntaxes[syntaxType] as syntax}\n\t\t\t\t\t\t<Card type={syntaxType} {syntax} />\n\t\t\t\t\t{/each}\n\t\t\t\t\t<br>\n\t\t\t\t{/each}\n\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\n</div>\n\n<Footer />","import App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.body\n});\n\nexport default app;"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","document","createElement","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","prevent_default","preventDefault","call","this","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","wholeText","toggle_class","toggle","classList","current_component","set_current_component","component","onMount","Error","get_current_component","$$","on_mount","push","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","seen_callbacks","Set","flushidx","flush","saved_component","update","pop","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","create_component","mount_component","customElement","on_destroy","m","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","Map","callbacks","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","$on","type","index","indexOf","splice","$set","$$props","obj","$$set","keys","syntaxes","Events","description","patterns","eventvalues","examples","Conditions","Effects","Expressions","nav","div0","a0","div2","active","$$invalidate","aside","raw_value","join","label","pre","innerHTML","t0_value","toUpperCase","t2_value","t9_value","raw0_value","replace","raw1_value","split","create_if_block","key","important","style","removeProperty","setProperty","div3","header","span0","div1","label0","label1","pre0","label2","pre1","t0","t2","t9","syntax","id","toLowerCase","async","elementId","window","location","href","dummy","body","select","execCommand","copyLink","button","backTop","scrollTop","documentElement","visible","scrollFunction","onscroll","footer","each_value_1","div","br0","br1","each_blocks","div5","div4","input","search","cards","getElementsByClassName","search_value","title","textContent","pattern","includes","display","urlParams","URLSearchParams","get","match","getElementById","setTimeout","scrollIntoView"],"mappings":"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A,cACA,sCACA,oBACA,iHACA,0JACA,8CACA,+EACA,uFACA,oEAGJ,CACEH,YACE,0GACF9H,KAAM,wBACN+H,SAAU,CACR,uDACA,0DACA,6EACA,iFAEFE,SAAU,CAAC,iDAEb,CACEH,YACE,0GACF9H,KAAM,kBACN+H,SAAU,CACR,wCACA,yDACA,kDACA,oEAEFE,SAAU,CACR,2CACA,aACA,qCACA,4DACA,aACA,gEAGJ,CACEH,YACE,4LACF9H,KAAM,kBACN+H,SAAU,CACR,qCACA,gDAEFE,SAAU,CACR,4CACA,aACA,+BACA,6CACA,aACA,iDAGJ,CACEH,YACE,mEACF9H,KAAM,OACN+H,SAAU,CACR,wDACA,oDAEFE,SAAU,CACR,wBACA,gBACA,aACA,gCACA,+CAGJ,CACEH,YAAa,6CACb9H,KAAM,sBACN+H,SAAU,CACR,yCACA,oDAEFE,SAAU,CACR,6BACA,2CACA,mBACA,8BACA,8CAGJ,CACEH,YACE,4GACF9H,KAAM,mBACN+H,SAAU,CAAC,2BACXE,SAAU,CACR,yBACA,aACA,wBACA,wCACA,qDAGJ,CACEH,YACE,0EACF9H,KAAM,uBACN+H,SAAU,CAAC,+BAAgC,+BAC3CE,SAAU,CACR,oBACA,aACA,2BACA,2CACA,oDACA,4CACA,mDAGJ,CACEH,YACE,4FACF9H,KAAM,aACN+H,SAAU,CACR,8CACA,mKACA,0HAEFE,SAAU,CACR,kBACA,aACA,wBACA,4CACA,qDACA,4CACA,wCAGJ,CACEH,YAAa,oDACb9H,KAAM,mBACN+H,SAAU,CACR,qEAEFE,SAAU,CACR,0BACA,gBACA,aACA,sCACA,6CACA,4BAINE,QAAS,CACP,CACEL,YACE,yLACF9H,KAAM,aACN+H,SAAU,CAAC,4DACXE,SAAU,CACR,4EAGJ,CACEH,YAAa,kCACb9H,KAAM,qBACN+H,SAAU,CAAC,2CACXE,SAAU,CAAC,uBAEb,CACEH,YAAa,kDACb9H,KAAM,sBACN+H,SAAU,CACR,uEAEFE,SAAU,CACR,yBACA,iBACA,aACA,2DACA,gCACA,iDACA,aACA,+DAGJ,CACEH,YACE,qFACF9H,KAAM,cACN+H,SAAU,CACR,iEAEFE,SAAU,CAAC,wDAEb,CACEH,YACE,sEACF9H,KAAM,aACN+H,SAAU,CAAC,0DACXE,SAAU,CACR,2GAGJ,CACEH,YACE,4FACF9H,KAAM,eACN+H,SAAU,CACR,qFAEFE,SAAU,CAAC,0CAEb,CACEH,YACE,qJACF9H,KAAM,eACN+H,SAAU,CACR,uFAEFE,SAAU,CACR,WACA,yEACA,6BACA,wGAGJ,CACEH,YAAa,mCACb9H,KAAM,gBACN+H,SAAU,CAAC,oDACXE,SAAU,CAAC,kDAEb,CACEH,YAAa,qDACb9H,KAAM,aACN+H,SAAU,CACR,oEAEFE,SAAU,CAAC,mDAEb,CACEH,YAAa,2CACb9H,KAAM,aACN+H,SAAU,CACR,gEAEFE,SAAU,CAAC,wCAEb,CACEH,YACE,yKACF9H,KAAM,uBACN+H,SAAU,CACR,+FAEFE,SAAU,CACR,gCACA,iBACA,aACA,uCACA,+BACA,iBACA,aACA,sCACA,wCACA,iBACA,aACA,uDACA,iCACA,iBACA,aACA,6CAGJ,CACEH,YACE,kMACF9H,KAAM,sBACN+H,SAAU,CACR,yFAEFE,SAAU,CACR,wEAGJ,CACEH,YACE,+EACF9H,KAAM,gBACN+H,SAAU,CAAC,uCACXE,SAAU,CACR,6BACA,aACA,2BAGJ,CACEH,YACE,wLACF9H,KAAM,wBACN+H,SAAU,CAAC,2DACXE,SAAU,CACR,kBACA,sBACA,sCACA,mDAGJ,CACEH,YAAa,gDACb9H,KAAM,gBACN+H,SAAU,CAAC,sDACXE,SAAU,CACR,mCACA,yBACA,aACA,2BACA,qDACA,gDACA,wCACA,0BACA,uDACA,aACA,iEAGJ,CACEH,YACE,6HACF9H,KAAM,uBACN+H,SAAU,CACR,mEAEFE,SAAU,CAAC,0CAEb,CACEH,YAAa,8BACb9H,KAAM,cACN+H,SAAU,CAAC,sCACXE,SAAU,CAAC,uCAEb,CACEH,YAAa,6CACb9H,KAAM,cACN+H,SAAU,CAAC,yDACXE,SAAU,CAAC,iCAEb,CACEH,YACE,uKACF9H,KAAM,QACN+H,SAAU,CACR,gEAEFE,SAAU,CACR,kBACA,sBACA,sCACA,mDAGJ,CACEH,YAAa,2CACb9H,KAAM,cACN+H,SAAU,CACR,sEAEFE,SAAU,CACR,mCACA,aACA,wBACA,kDACA,aACA,iDAGJ,CACEH,YAAa,mCACb9H,KAAM,iBACN+H,SAAU,CAAC,sCACXE,SAAU,CACR,mCACA,yBACA,aACA,2BACA,qDACA,gDACA,wCACA,0BACA,uDACA,aACA,iEAGJ,CACEH,YACE,iEACF9H,KAAM,aACN+H,SAAU,CAAC,+DACXE,SAAU,CAAC,sCAEb,CACEH,YACE,uMACF9H,KAAM,UACN+H,SAAU,CAAC,8CACXE,SAAU,CACR,4BACA,sCAGJ,CACEH,YACE,uHACF9H,KAAM,YACN+H,SAAU,CACR,6IAEFE,SAAU,CACR,6CACA,aACA,2BACA,wJACA,aACA,2BACA,sCACA,aACA,yDAGJ,CACEH,YACE,gEACF9H,KAAM,iBACN+H,SAAU,CACR,mFACA,qFAEFE,SAAU,CACR,yCACA,aACA,iCACA,yCACA,aACA,qCACA,wCACA,aACA,6EAGJ,CACEH,YACE,0FACF9H,KAAM,gBACN+H,SAAU,CACR,0IAEFE,SAAU,CAAC,kDAEb,CACEH,YAAa,yDACb9H,KAAM,yBACN+H,SAAU,CACR,0GAEFE,SAAU,CACR,4BACA,aACA,4BACA,gDACA,6CACA,4CAGJ,CACEH,YACE,sHACF9H,KAAM,eACN+H,SAAU,CACR,mFAEFE,SAAU,CACR,8CACA,aACA,0CACA,qBACA,sCAGJ,CACEH,YAAa,sCACb9H,KAAM,wBACN+H,SAAU,CACR,qGAEFE,SAAU,CAAC,wCAEb,CACEH,YACE,uGACF9H,KAAM,YACN+H,SAAU,CAAC,oDACXE,SAAU,CACR,yBACA,aACA,+BACA,4CACA,2BACA,sDACA,aACA,iEAGJ,CACEH,YAAa,gCACb9H,KAAM,uBACN+H,SAAU,CAAC,mCACXE,SAAU,CAAC,qCAEb,CACEH,YACE,mGACF9H,KAAM,+BACN+H,SAAU,CAAC,uDACXE,SAAU,CACR,2CACA,aACA,yDACA,qCACA,iEACA,aACA,sCAGJ,CACEH,YAAa,6DACb9H,KAAM,oCACN+H,SAAU,CACR,sGAEFE,SAAU,CACR,6CACA,aACA,wDACA,aACA,wCACA,0DACA,kFAGJ,CACEH,YACE,0IACF9H,KAAM,2BACN+H,SAAU,CACR,iGAEFE,SAAU,CACR,0BACA,aACA,wCACA,+CAGJ,CACEH,YACE,sIACF9H,KAAM,sBACN+H,SAAU,CAAC,6DACXE,SAAU,CACR,wBACA,gBACA,aACA,0CACA,4CAGJ,CACEH,YAAa,qDACb9H,KAAM,WACN+H,SAAU,CACR,yJAEFE,SAAU,CACR,uBACA,aACA,0GAGJ,CACEH,YACE,sGACF9H,KAAM,cACN+H,SAAU,CAAC,+CACXE,SAAU,CACR,kCACA,aACA,4CACA,uFACA,aACA,sCACA,oCACA,yCACA,YACA,sCACA,qDAGJ,CACEH,YAAa,sDACb9H,KAAM,YACN+H,SAAU,CACR,0GAEFE,SAAU,CACR,wBACA,aACA,kGAGJ,CACEH,YAAa,wDACb9H,KAAM,4BACN+H,SAAU,CAAC,6CACXE,SAAU,CACR,kCACA,aACA,4CACA,qFACA,aACA,mCACA,kCACA,0CACA,YACA,oCACA,kDAGJ,CACEH,YAAa,uCACb9H,KAAM,wBACN+H,SAAU,CAAC,+DACXE,SAAU,CACR,uBACA,aACA,qCAGJ,CACEH,YAAa,8BACb9H,KAAM,0BACN+H,SAAU,CAAC,2CACXE,SAAU,CAAC,6BAA8B,8BAE3C,CACEH,YAAa,8BACb9H,KAAM,iBACN+H,SAAU,CACR,qFAEFE,SAAU,CACR,yEAGJ,CACEH,YAAa,6DACb9H,KAAM,8BACN+H,SAAU,CACR,8FAEFE,SAAU,CACR,yCACA,aACA,wDACA,aACA,wCACA,mDACA,oDAGJ,CACEH,YAAa,wBACb9H,KAAM,oBACN+H,SAAU,CAAC,uDACXE,SAAU,CAAC,6BAA8B,wBAE3C,CACEH,YAAa,+CACb9H,KAAM,iCACN+H,SAAU,CACR,iFAEFE,SAAU,CACR,6BACA,mDAGJ,CACEH,YAAa,6BACb9H,KAAM,yBACN+H,SAAU,CACR,8FAEFE,SAAU,CACR,6BACA,sDAGJ,CACEH,YACE,wHACF9H,KAAM,oCACN+H,SAAU,CAAC,+CACXE,SAAU,CACR,kBACA,aACA,uCACA,iCACA,8BACA,oDAGJ,CACEH,YACE,wFACF9H,KAAM,0BACN+H,SAAU,CAAC,kDACXE,SAAU,CAAC,uDAEb,CACEH,YACE,+FACF9H,KAAM,eACN+H,SAAU,CAAC,kDACXE,SAAU,CACR,yBACA,aACA,+CACA,oCAGJ,CACEH,YACE,6HACF9H,KAAM,uBACN+H,SAAU,CACR,sEAEFE,SAAU,CACR,qBACA,gEAGJ,CACEH,YAAa,sBACb9H,KAAM,mBACN+H,SAAU,CACR,kHAEFE,SAAU,CACR,yBACA,aACA,8DAGJ,CACEH,YAAa,kCACb9H,KAAM,aACN+H,SAAU,CACR,4EAEFE,SAAU,CAAC,mDAEb,CACEH,YAAa,qDACb9H,KAAM,2BACN+H,SAAU,CACR,kEAEFE,SAAU,CACR,8CACA,aACA,sCACA,4CACA,4DACA,aACA,iFAGJ,CACEH,YAAa,qDACb9H,KAAM,eACN+H,SAAU,CACR,sIAEFE,SAAU,CACR,yCACA,aACA,2BACA,mDACA,aACA,8CACA,gCACA,8DACA,aACA,gDAGJ,CACEH,YAAa,yCACb9H,KAAM,iBACN+H,SAAU,CAAC,sCACXE,SAAU,CAAC,uCAGfG,YAAa,CACX,CACEN,YAAa,6DACb9H,KAAM,mBACN+H,SAAU,CAAC,0CACXE,SAAU,CACR,0BACA,yBACA,aACA,8BACA,4CACA,2CACA,aACA,yCACA,qCAGJ,CACEH,YACE,gEACF9H,KAAM,eACN+H,SAAU,CAAC,4CACXE,SAAU,CACR,0BACA,aACA,mCACA,4DAGJ,CACEH,YAAa,uDACb9H,KAAM,uBACN+H,SAAU,CAAC,uDACXE,SAAU,CACR,yBACA,aACA,iDACA,8BACA,0DACA,aACA,uFAGJ,CACEH,YACE,+MACF9H,KAAM,gBACN+H,SAAU,CAAC,6CACXE,SAAU,CACR,sCACA,aACA,2BACA,2CACA,aACA,2CACA,+DAGJ,CACEH,YACE,6EACF9H,KAAM,YACN+H,SAAU,CACR,6CACA,yCAEFE,SAAU,CACR,qCACA,aACA,iDACA,+BACA,sCACA,aACA,wDAGJ,CACEH,YAAa,+CACb9H,KAAM,yBACN+H,SAAU,CACR,4CACA,wCAEFE,SAAU,CAAC,iCAEb,CACEH,YAAa,8BACb9H,KAAM,gBACN+H,SAAU,CAAC,iCAAkC,6BAC7CE,SAAU,CAAC,wBAEb,CACEH,YACE,+EACF9H,KAAM,uBACN+H,SAAU,CACR,0DACA,qDAEFE,SAAU,CACR,kCACA,aACA,kFAGJ,CACEH,YACE,kEACF9H,KAAM,gBACN+H,SAAU,CACR,oCACA,gCAEFE,SAAU,CACR,2BACA,aACA,gEAGJ,CACEH,YAAa,4CACb9H,KAAM,cACN+H,SAAU,CAAC,wCACXE,SAAU,CACR,0BACA,aACA,2BACA,qDACA,kDACA,oEAGJ,CACEH,YACE,gKACF9H,KAAM,6BACN+H,SAAU,CACR,wCACA,oCAEFE,SAAU,CACR,2BACA,aACA,4BACA,gDACA,6CACA,4CAGJ,CACEH,YAAa,kDACb9H,KAAM,kCACN+H,SAAU,CACR,2CACA,uCAEFE,SAAU,CACR,2BACA,aACA,4BACA,gDACA,+CACA,0EACA,kFAGJ,CACEH,YAAa,6DACb9H,KAAM,0BACN+H,SAAU,CACR,qCACA,iCAEFE,SAAU,CACR,kCACA,aACA,2BACA,6CACA,0EACA,kFAGJ,CACEH,YACE,2GACF9H,KAAM,kCACN+H,SAAU,CACR,2CACA,uCAEFE,SAAU,CACR,4CACA,aACA,2BACA,6CACA,mDACA,0EACA,uEACA,0BAGJ,CACEH,YAAa,gDACb9H,KAAM,8BACN+H,SAAU,CACR,kDACA,8CAEFE,SAAU,CACR,kCACA,aACA,2BACA,8CACA,6DACA,0EACA,uEACA,0BAGJ,CACEH,YAAa,+CACb9H,KAAM,2BACN+H,SAAU,CACR,sCACA,kCAEFE,SAAU,CACR,kCACA,aACA,2BACA,8CACA,kDACA,0EACA,uEACA,0BAGJ,CACEH,YACE,2EACF9H,KAAM,+BACN+H,SAAU,CAAC,uDACXE,SAAU,CACR,kCACA,aACA,2BACA,8CACA,kDACA,0EACA,uEACA,0BAGJ,CACEH,YACE,+JACF9H,KAAM,2BACN+H,SAAU,CACR,sCACA,kCAE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SAAU,CAAC,8BAA+B,wBAC1CE,SAAU,CACR,sBACA,uFAGJ,CACEH,YACE,oGACF9H,KAAM,0BACN+H,SAAU,CAAC,iBACXE,SAAU,CAAC,SAEb,CACEH,YACE,6IACF9H,KAAM,iBACN+H,SAAU,CAAC,+BACXE,SAAU,CACR,WACA,yEACA,+BACA,yGAGJ,CACEH,YACE,gSACF9H,KAAM,aACN+H,SAAU,CAAC,0DACXE,SAAU,CACR,+BACA,aACA,yDACA,qBACA,gEAGJ,CACEH,YACE,8JACF9H,KAAM,sBACN+H,SAAU,CACR,kCACA,8BAEFE,SAAU,CACR,+BACA,aACA,4DACA,2EAGJ,CACEH,YAAa,yCACb9H,KAAM,iBACN+H,SAAU,CACR,gEAEFE,SAAU,CACR,kCACA,aACA,2BACA,8CACA,6DACA,0EACA,uEACA,0BAGJ,CACEH,YAAa,8BACb9H,KAAM,mBACN+H,SAAU,CAAC,2CACXE,SAAU,CAAC,mDAEb,CACEH,YAAa,mCACb9H,KAAM,iBACN+H,SAAU,CACR,qCACA,iCAEFE,SAAU,CACR,sCACA,aACA,iEAGJ,CACEH,YACE,6EACF9H,KAAM,uBACN+H,SAAU,CACR,mCACA,+BAEFE,SAAU,CACR,wBACA,aACA,kDAGJ,CACEH,YACE,mHACF9H,KAAM,iBACN+H,SAAU,CAAC,mCACXE,SAAU,CACR,yBACA,aACA,+BACA,+DAGJ,CACEH,YAAa,kDACb9H,KAAM,cACN+H,SAAU,CACR,uCACA,mCAEFE,SAAU,CACR,sCACA,aACA,2BACA,gFACA,aACA,8CACA,sGAGJ,CACEH,YAAa,mDACb9H,KAAM,2BACN+H,SAAU,CACR,2FACA,uFAEFE,SAAU,CAAC,uDAEb,CACEH,YAAa,2CACb9H,KAAM,kBACN+H,SAAU,CACR,uCACA,mCAEFE,SAAU,CACR,2BACA,yBACA,aACA,kCACA,mCACA,2CACA,cACA,sCACA,oBACA,iHACA,0JACA,8CACA,+EACA,uFACA,oEAGJ,CACEH,YAAa,0BACb9H,KAAM,oBACN+H,SAAU,CAAC,4BAA6B,wBACxCE,SAAU,CAAC,uCAEb,CACEH,YACE,sFACF9H,KAAM,0BACN+H,SAAU,CAAC,8CACXE,SAAU,CACR,0BACA,aACA,wCACA,+CAGJ,CACEH,YAAa,2DACb9H,KAAM,aACN+H,SAAU,CACR,sDACA,kDAEFE,SAAU,CACR,0BACA,aACA,8DAGJ,CACEH,YAAa,6DACb9H,KAAM,uBACN+H,SAAU,CACR,kCACA,8BAEFE,SAAU,CACR,wBACA,aACA,oDAGJ,CACEH,YAAa,uCACb9H,KAAM,aACN+H,SAAU,CACR,iEAEFE,SAAU,CACR,gCACA,aACA,sCACA,6BACA,yDACA,aACA,2DAGJ,CACEH,YAAa,oCACb9H,KAAM,iBACN+H,SAAU,CAAC,2BAA4B,uBACvCE,SAAU,CACR,0BACA,aACA,0EAGJ,CACEH,YAAa,yDACb9H,KAAM,mBACN+H,SAAU,CACR,gDACA,4CAEFE,SAAU,CACR,sCACA,aACA,2BACA,gFACA,aACA,8CACA,sGAGJ,CACEH,YACE,+DACF9H,KAAM,sCACN+H,SAAU,CACR,kDACA,8CAEFE,SAAU,CAAC,4DAEb,CACEH,YAAa,wDACb9H,KAAM,iBACN+H,SAAU,CACR,iDACA,6CAEFE,SAAU,CACR,4BACA,wDACA,yBACA,yCAGJ,CACEH,YAAa,6CACb9H,KAAM,aACN+H,SAAU,CACR,yCACA,qCAEFE,SAAU,CACR,gCACA,gBACA,aACA,2CACA,0CACA,oBACA,0CACA,gCACA,+CACA,wGACA,6CACA,iIACA,4EACA,sFACA,oFACA,qEACA,2EAGJ,CACEH,YACE,iLACF9H,KAAM,qBACN+H,SAAU,CAAC,6BACXE,SAAU,CACR,wBACA,gBACA,aACA,qDACA,wCACA,8BACA,+CAGJ,CACEH,YACE,6NACF9H,KAAM,UACN+H,SAAU,CAAC,+BAAgC,2BAC3CE,SAAU,CACR,0BACA,gBACA,aACA,sCACA,6CACA,4CACA,8BACA,sCAGJ,CACEH,YACE,iIACF9H,KAAM,mBACN+H,SAAU,CACR,0CACA,sCAEFE,SAAU,CACR,wBACA,gBACA,aACA,qDACA,wCACA,8BACA,uCAGJ,CACEH,YAAa,6CACb9H,KAAM,0BACN+H,SAAU,C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"}